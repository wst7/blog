<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>步行街的Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wstreet.github.io/blog/"/>
  <updated>2021-11-27T07:05:05.951Z</updated>
  <id>https://wstreet.github.io/blog/</id>
  
  <author>
    <name>wstreet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web网络安全</title>
    <link href="https://wstreet.github.io/blog/2020/12/10/web%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <id>https://wstreet.github.io/blog/2020/12/10/web网络安全/</id>
    <published>2020-12-10T20:31:24.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p><strong>定义：</strong><br>XSS(Cross Site Scripting)，跨站脚本攻击。是一种经常出现在web应用中的安全漏洞，它允许恶意用户将将代码植入到其他用户的页面，这些代码包括HTML和JavaScript脚本。</p><p><strong>危害：</strong></p><ul><li>盗取各类用户账号(cookie)</li><li>篡改数据</li><li>非法转账</li><li>发送恶意邮件</li><li>控制受害者电脑向其他电脑发起攻击等</li></ul><p><strong>类型：</strong><br><em>持久型</em>：攻击者将恶意代码（脚本）提交到数据库，当每个用户打开这个页面时，恶意代码将会执行，例如，留言板提交 <code>&lt;script&gt;alert(&#39;1&#39;)&lt;/script&gt;</code> 。<br><em>反射型</em>：非持久型。发出请求时，XSS攻击代码出现在URL中，作为输入提交到服务器，服务器解析处理后，XSS代码随响应一起返回给浏览器，最后浏览器解析执行XSS代码，这个过程像一次反射，所以叫做反射型XSS<br><em>DOM-XSS</em>：JavaScript可以对DOM做更改，改攻击就是利用了这一点，一般是将攻击脚本加载URL后面或者页面输入恶意脚本内容，浏览器执行更改DOM</p><p><strong>XSS漏洞存在的原因</strong>：<br>XSS漏洞的根本原因是没有对URL参数、用户输入内容进行充分的过滤，如果我们将不合法的参数和内容进行充分过滤，就可以有效减少被攻击的可能性。</p><p>但实际上，充分有效的过滤是无法实现的，因为攻击者有各种各样神奇的、你完全想象不到的方式来绕开服务端的过滤。最典型的就是对URL和参数进行各种的编码，比如escape, encodeURI, encodeURIComponent, 16进制，10进制，8进制，来绕过XSS过滤。那么我们如何来防御XSS呢？</p><p><strong>预防方法：</strong><br>总体思路：对参数和输入进行过滤，对输出进行编码</p><p><em>参数和输入进行过滤</em>：对于输入的内容，客户端和服务端都进行合法校验；服务端将容易引起xss漏洞的半角字符直接替换成全角字符。<br><em>对输出进行编码</em>：虽然对参数和输入内容进行了过滤，但是不能保证输出到页面的内容不含有攻击脚本，所以需要对输出内容进行编码，使得恶意脚本无法执行。</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p><strong>定义：</strong><br>CSRF(Cross-site request forgery)，跨站请求伪造。攻击者诱导用户打开攻击网站B，网站B向用户信任并且已经登陆的网站A发起跨站请求，拿到用户的登陆状态（cookie），然后伪装成用户进行非法操作。</p><p>从攻击网站B向信任服务器A发送请求方式有3中：<br>1、诱导用户通过点击a链接发送请求<br>2、img标签自动发送请求<br>3、通过脚本发送请求</p><p><strong>预防方法</strong>：<br>CSRF攻击主要由服务器端设置来预防，主要预防措施有以下几种：<br>1、利用cookie的SameSite属性，SameSite有Strict、Lax和None三个值</p><ul><li>Strict最为严格，如果cookie设置了Strict，那么浏览器会完全禁止第三方Cookie。</li><li>Lax相对宽松一点，在跨站点的情况下，从第三方站点的链接打开和从第三方站点提交Get的表单都会携带cookie.但是如果在第三方站点中使用Post方法或者通过img、iframe等标签加载的URL,都不会携带Cookie。</li><li>None, 任何情况下都会发送Cookie。</li></ul><p>此方法适用于静态资源和接口服务器在同一域名下的情况。</p><p>2、验证请求来源<br>在服务器端验证请求来源，因为一般攻击都是第三方站点。</p><ul><li>Referer属性：记录了该Http请求的来源站点。但是Referer属性是可以修改的，所以在服务器端校验Referer属性并没有那么可靠。</li><li>origin属性：通过XMLHttpRequest、Fetch发起的跨站请求或者Post方法发送请求时，都会带上origin,所以服务器可以优先判断Origin属性，再根据实际情况判断是否使用referer判断</li></ul><p>3、token<br>最保险的方法就是使用token验证，在向服务器发起请求时，服务端生成一个唯一的token返回给浏览器，在浏览器的后续请求中需要携带这个token，服务器验证其合法性，验证不通过则拒绝请求。</p><p><strong>补充说明：</strong> Referer的正确英语拼法是<code>referrer</code> 。由于早期HTTP规范的拼写错误，为了保持向后兼容就将错就错了。其它网络技术的规范企图修正此问题，使用正确拼法，所以目前拼法不统一，还有它第一个字母是大写。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;br&gt;XSS(Cross Site Scripting)，跨站脚本攻击。是一种经常出现在w
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Http缓存</title>
    <link href="https://wstreet.github.io/blog/2020/11/10/Http%E7%BC%93%E5%AD%98/"/>
    <id>https://wstreet.github.io/blog/2020/11/10/Http缓存/</id>
    <published>2020-11-10T21:25:53.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<p><a name="riul2"></a></p><h2 id="为什么需要缓存"><a href="#为什么需要缓存" class="headerlink" title="为什么需要缓存"></a>为什么需要缓存</h2><p>在前后端通过Http通信过程中，有些资源的内容是没有发生改变的，这些资源如果不缓存的话，就会造成资源浪费，以及资源加影响性能。<br><a name="F5E3x"></a></p><h2 id="缓存分类"><a href="#缓存分类" class="headerlink" title="缓存分类"></a>缓存分类</h2><p>Http缓存分为两类，强缓存和协商缓存，检测顺序是：先检测强缓存，强缓存有并且未过期，则走强缓存，否则检测协商缓存，协商缓存有并且未过期，则走协商缓存，否则从服务器端重新加载资源。<br><a name="Enmsp"></a></p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>请求命中强缓存时，不会将请求发送给服务端，状态码是200，size显示from cache，强缓存是利用响应头中的Expires或者Cache-Control来控制的<br><a name="Gt3Fr"></a></p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>Expires是HTTP/1.0中的，它的值是一个GMT格林威治标准时间，代表该资源过期的时间。但是存在 一个问题，如果把客户端 时间往后设置，那资源就不会过期，所以在HTTP/1.1新增了Cache-Cotrol<br /></p><p><a name="aoJ9q"></a></p><h4 id="Cache-Cotrol"><a href="#Cache-Cotrol" class="headerlink" title="Cache-Cotrol"></a>Cache-Cotrol</h4><p>缓存请求指令</p><table><thead><tr><th>指令</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>no-cache</td><td>无</td><td>强制向源服务器再次验证</td></tr><tr><td>no-store</td><td>无</td><td>不缓存请求或者响应的任何内容</td></tr><tr><td>max-age=[秒]</td><td>必须</td><td>响应的最大Age值</td></tr><tr><td>max-stale(=[秒])</td><td>可省略</td><td>接收已过期的响应</td></tr><tr><td>min-fresh=[秒]</td><td>必须</td><td>期望在指定时间内的响应任然有效</td></tr><tr><td>no-transform</td><td>无</td><td>代理不可更改媒体类型</td></tr><tr><td>only-if-cached</td><td>无</td><td>从缓存获取资源</td></tr><tr><td>cache-extension</td><td>-</td><td>新指令标记</td></tr></tbody></table><p>缓存响应指令</p><table><thead><tr><th>指令</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>无</td><td>可向任意方提供响应的缓存</td></tr><tr><td>private</td><td>可省略</td><td>仅向特定用户返回响应</td></tr><tr><td>no-cache</td><td>可省略</td><td>缓存前必须确认其有效性</td></tr><tr><td>no-store</td><td>无</td><td>不缓存请求或者响应的任何内容</td></tr><tr><td>no-transform</td><td>无</td><td>代理不可更改媒体类型</td></tr><tr><td>must-revalidate</td><td>无</td><td>可缓存但必须再向源服务器进行确认</td></tr><tr><td>proxy-revalidate</td><td>无</td><td>要求中间缓存服务器对缓存的响应有效性再进行确认</td></tr><tr><td>max-age=[秒]</td><td>必须</td><td>响应的最大Age值</td></tr><tr><td>s-maxage=[秒]</td><td>必须</td><td>公共缓存服务器响应的最大Age值</td></tr><tr><td>cache-extension</td><td>-</td><td>新指令标记</td></tr></tbody></table><p><a name="y6Si2"></a></p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>当强缓存过期后，客户端发起的请求会去和服务器交互协商（请求头中存在以下两组信息），确认协商缓存资源是否有效，如果有效，则返回状态码304，客户端从缓存池加载缓存资源；如果资源过期，则服务端重新返回资源并根据请求头判断是否将资源加入缓存池，状态码200。控制协商缓存的header字段有两组<br><a name="Tlrrg"></a></p><h4 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified/If-Modified-Since"></a>Last-Modified/If-Modified-Since</h4><p>Last-Modified和If-Modified-Since都是标准的HTTP头标签，代表资源最后修改时间，Last-Modified由服务器发送给客户端，存在于Response Headers中；If-Modified-Since是由客户端发送给服务器，存在Request Headers中，服务器会拿If-Modified-Since的时间去对比资源最后修改时间，如果If-Modified-Since的时间和资源最后修改时间一致，说明资源没有过期；如果不一致，说明过期了，这时候服务端会重新给客户端返回一份最新的资源，并在Response Headers中返回最后Last-Modified：修改时间</p><p>但是这种协商缓存策略有一些缺点，比如：标识修改时间只能到秒，如果在1秒内多次修改某一文件，则在客户端不会更新该文件，因为检测不出来。</p><p><a name="PJ0HE"></a></p><h4 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag/If-None-Match"></a>Etag/If-None-Match</h4><p>Last-Modified/If-Modified-Since是根据最后修改时间来判断缓存资源是否有效的，而Etag/If-None-Match是根据文件内容判断的，首先根据文件内容生成一个唯一标识，比如：ETag: “50b1c1d4f775c61:df3”，向客户端返回，客户端将资源缓存到缓存池，当再次发起请求时，请求头中会携带If-None-Match: “50b1c1d4f775c61:df3”，服务器接收到请求时根据这个标识判断资源是否被修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;riul2&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么需要缓存&quot;&gt;&lt;a href=&quot;#为什么需要缓存&quot; class=&quot;headerlink&quot; title=&quot;为什么需要缓存&quot;&gt;&lt;/a&gt;为什么需要缓存&lt;/h2&gt;&lt;p&gt;在前后端通过Http通信过程中，有些资源的内
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Event Loop</title>
    <link href="https://wstreet.github.io/blog/2020/07/16/Event_Loop/"/>
    <id>https://wstreet.github.io/blog/2020/07/16/Event_Loop/</id>
    <published>2020-07-16T22:42:00.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript最初设计的是浏览器脚本语言，用来操作DOM实现交互的，所以他被设计成单线程的。那为什么是单线程的，试想一下，如果是多线程，一个线程修改DOM，一个线程删除DOM，那最后的浏览器也不知道以哪个线程的结果为准，所以决定了JavaScript只能是单线程的，即同一时间只能做一件事。<br /></p><p><a name="Y5lOs"></a></p><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>在JavaScript中，将任务分为了微任务和宏任务：<br />宏任务：script，setTimeout，setInterval，I/O，UI render<br />微任务：promise.then，process.nextTick， MutationObserver</p><p>对于同步任务，直接在主线程中执行，但是遇到异步任务时，并不会立即执行，而是将异步任务添加到对应的任务队列中（宏任务队列 macroTask queue，微任务队列microTask queue）。队列是一种先进先出的线性表结构，队列从队尾插入元素，队首删除元素</p><p>每一次事件循环都会经过一下步骤：<br />1、执行一个宏任务（浏览器中第一次执行的时候时script中的代码）<br />2、遇到异步任务时将任务添加到<strong>对应的</strong>任务队列中<br />3、当前宏任务执行完毕后，主线程读取微任务队列中的任务并依次执行<br />4、微任务队列中的任务执行完毕后，读取下一个宏任务又从步骤1开始，一直循环，直到任务队列中没有任务</p><p><a name="nN4nu"></a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'setTimeout1'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>);  <span class="comment">//1宏任务</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout2'</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise3'</span>);</span><br><span class="line">        <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'promise4'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setTimeout4'</span>), <span class="number">0</span>);  <span class="comment">//4宏任务</span></span><br><span class="line">&#125;, <span class="number">0</span>); <span class="comment">// 2宏任务</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setTimeout3'</span>), <span class="number">0</span>);  <span class="comment">//3宏任务</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">//1微任务</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果分析：首先执行这段代码时已经是在运行一个宏任务了，<br />将第1个setTimeout回调添加到宏任务队列，将第2个setTimeout回调添加到宏任务队列，将第3个setTimeout回调添加到宏任务队列，Promise.resolve().then的回调添加到微任务队列，此时这个script的宏任务运行完了，主线程开始读取微任务队列并依次执行，<strong>打印promise1</strong>，微任务队列为空，开始读取宏任务setTimeout1并执行，<strong>打印setTimeout1</strong>，检查微任务队列为空，继续读取宏任务setTimeout2，<strong>打印setTimeout2</strong>，并将promise3的回调添加到微任务队列，再向宏任务队列中添加setTimeout4回调，开始读取微任务列表并执行，<strong>打印promise3</strong>，将promise4回调添加到微任务队列，<strong>打印5</strong>，读取微任务列表并执行，<strong>打印promise4</strong>，微任务列表为空，读取第3个宏任务setTimeout3回调并执行，<strong>打印setTimeout3</strong>，微任务列表为空，读取第4个宏任务setTimeout4回调并执行，<strong>打印setTimeout4</strong>，所以最终结果为：<br />promise1，setTimeout1，setTimeout2，promise3，5，promise4，setTimeout3，setTimeout4<br /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript最初设计的是浏览器脚本语言，用来操作DOM实现交互的，所以他被设计成单线程的。那为什么是单线程的，试想一下，如果是多线程，一个线程修改DOM，一个线程删除DOM，那最后的浏览器也不知道以哪个线程的结果为准，所以决定了JavaScript只能是单线程的，即
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux源码</title>
    <link href="https://wstreet.github.io/blog/2020/07/14/Redux%E6%BA%90%E7%A0%81/"/>
    <id>https://wstreet.github.io/blog/2020/07/14/Redux源码/</id>
    <published>2020-07-14T22:58:02.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<p>React更偏向于构建UI，虽然也能进行状态管理，但是面对大型复杂的项目，往往会面临跨组件通信，这时候就可以使用Redux。Redux是一种状态管理容器，他可以将组件用到的所有数据都保存在store中。<br /></p><p><a name="sJbhM"></a></p><h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><p>createStore(reducer, initialState, enhancer)用于创建一个store，第一个参数reducer用来修改store中的state，initialState为初始的state，enhancer是一个增强器，如果项目使用middleware的话，enhancer就是applyMiddleware的返回值，如果没有用middleware，则enhancer不传，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, initialState, enhancer</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 如果存在enhancer：enhancer(createStore)返回一个增强的（使用了middleware）createStore</span></span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, initialState)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">true</span></span><br><span class="line">      currentState = currentReducer(currentState, action)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> action</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// State 是只读的，唯一改变 state 的方法就是触发 action，</span></span><br><span class="line">  <span class="comment">// reducer根据action返回一个新的state</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentState</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果不存在enhancer，则返回的store是这样的</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState,</span><br><span class="line">    replaceReducer,</span><br><span class="line">    [$$observable]: observable</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="07H7Y"></a></p><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p>我们在上面说过了，applyMiddleware创建一个store的增强器，之所以增强，是因为dispatch被增强了，他是在原来的dispatch上附加了很多功能，具体是怎么实现的的，我们一起往下看<br /><br><br />先给出中间件的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> middleware1 = <span class="function"><span class="params">middlewareAPI</span> =&gt;</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m1 start'</span>)</span><br><span class="line">  <span class="keyword">const</span> result =  next(action)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m1 end'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleware2 = <span class="function"><span class="params">middlewareAPI</span> =&gt;</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m2 start'</span>)</span><br><span class="line">  <span class="keyword">const</span> result =  next(action)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m2 end'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Dispatching while constructing your middleware is not allowed. '</span> +</span><br><span class="line">          <span class="string">'Other middleware would not be applied to this dispatch.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将上面两个middleware传入applyMiddleware，得到</span></span><br><span class="line">    <span class="comment">// chain = [dispatch1, dispatch2]</span></span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// chain = [chain1, chain2]</span></span><br><span class="line"><span class="keyword">const</span> chain1 = <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m1 start'</span>)</span><br><span class="line">  <span class="keyword">const</span> result =  next(action)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m1 end'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chain2 = <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m2 start'</span>)</span><br><span class="line">  <span class="keyword">const</span> result =  next(action)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m2 end'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="zqUKF"></a></p><h2 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h2><p>compose方法最核心的就是使用Array.prototype.reduce，具体使用方法可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">MDN</a>，经过reduce之后得到的结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> a(b(...args)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// compose(f, g, h) ====&gt; (...args) =&gt; f(g(h(...args)))</span></span><br><span class="line"> <span class="comment">// composeResult = compose(...chain) = (...args) =&gt; chain1(chain2(...args))</span></span><br><span class="line"><span class="comment">// dispatch = chain1(chain2(defaultDispatch))</span></span><br></pre></td></tr></table></figure><br><a name="PnIaj"></a></p><h2 id="新dispatch"><a href="#新dispatch" class="headerlink" title="新dispatch"></a>新dispatch</h2><p>我们用defaultDispatch表示最开始创建的dispatch(createStore中的dispatch)，来看一下最后经过middleware包装过的dispatch长啥样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chain1 = <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m1 start'</span>)</span><br><span class="line">  <span class="keyword">const</span> result =  next(action)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m1 end'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chain2 = <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m2 start'</span>)</span><br><span class="line">  <span class="keyword">const</span> result =  next(action)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m2 end'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch = chain1(chain2(defaultDispatch))</span><br><span class="line"></span><br><span class="line">dispatch2 = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m2 start'</span>)</span><br><span class="line">  <span class="keyword">const</span> result =  defaultDispatch(action)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m2 end'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch1 = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m1 start'</span>)</span><br><span class="line">  <span class="keyword">const</span> result =  dispatch2(action)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m1 end'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m1 start'</span>)</span><br><span class="line">  <span class="comment">// const result =  dispatch2(action)</span></span><br><span class="line">  <span class="comment">// ----------------------------------</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m2 start'</span>)</span><br><span class="line">  <span class="keyword">const</span> result =  defaultDispatch(action)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m2 end'</span>)</span><br><span class="line"> <span class="comment">// ----------------------------------</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'m1 end'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里也展示了middleware是洋葱模型，中间件的访问顺序是外 =&gt; 内 =&gt; 外，最内部其实是调用最原生的(createStore中定义的)dispatch，来调用reducer生成最新的state<br /><br><br />另外可以看到middlewareAPI中的dispatch是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>而不是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: dispatch</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>是因为这里使用的是闭包，这样可以将经过中间件生成新的dispatch传给每一个中间件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React更偏向于构建UI，虽然也能进行状态管理，但是面对大型复杂的项目，往往会面临跨组件通信，这时候就可以使用Redux。Redux是一种状态管理容器，他可以将组件用到的所有数据都保存在store中。&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;sJbhM&quot;&gt;&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="React" scheme="https://wstreet.github.io/blog/categories/React/"/>
    
      <category term="Redux" scheme="https://wstreet.github.io/blog/categories/React/Redux/"/>
    
    
      <category term="React" scheme="https://wstreet.github.io/blog/tags/React/"/>
    
      <category term="Redux" scheme="https://wstreet.github.io/blog/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>实现一个Event事件机制</title>
    <link href="https://wstreet.github.io/blog/2020/07/08/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAEvent%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://wstreet.github.io/blog/2020/07/08/实现一个Event事件机制/</id>
    <published>2020-07-08T22:37:24.000Z</published>
    <updated>2021-11-27T07:05:05.955Z</updated>
    
    <content type="html"><![CDATA[<p>发布订阅模式在JavaScript中非常重要，可以用于模块件的通讯，DOM事件机制就是发布订阅模式的体现。接下来手动实现一个Event模块，实现以下功能</p><table><thead><tr><th>方法名称</th><th>功能</th></tr></thead><tbody><tr><td>on(event, listener)</td><td>为指定事件添加一个监听器</td></tr><tr><td>emit(event, [arg1], [arg2], […])</td><td>按监听器的顺序执行执行每个监听器，如果事件有注册监听返回 true，否则返回 false</td></tr><tr><td>once(event, listener)</td><td>为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。</td></tr><tr><td>off(event, listener)</td><td>移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。 它接受两个参数，第一个是事件名称，第二个是回调函数名称。</td></tr><tr><td>listeners(event)</td><td>返回指定事件的监听器数组。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>._eventsMap = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加事件监听</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">event</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">listener</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> </span>[once=false]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@memberof <span class="variable">EventEmitter</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  on(event, listener, once = <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._eventsMap[event]) &#123;</span><br><span class="line">      <span class="keyword">this</span>._eventsMap[event] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> listeners = <span class="keyword">this</span>._eventsMap[event]</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._eventsMap[event].includes(listener)) &#123;</span><br><span class="line">      <span class="keyword">this</span>._eventsMap[event].push(listener)</span><br><span class="line">      listener.once = once</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 触发事件</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">event</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">args</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@memberof <span class="variable">EventEmitter</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  emit(event, ...args) &#123;</span><br><span class="line">    <span class="keyword">const</span> listeners = <span class="keyword">this</span>._eventsMap[event]</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (listeners &amp;&amp; listeners.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span><br><span class="line">        listener.call(_this, ...args)</span><br><span class="line">        <span class="keyword">if</span> (listener.once) &#123;</span><br><span class="line">          <span class="keyword">this</span>.off(event, listener)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加事件监听，并只能触发一次</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">event</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">listener</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@memberof <span class="variable">EventEmitter</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  once(event, listener) &#123;</span><br><span class="line">    <span class="keyword">this</span>.on(event, listener, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取消事件监听</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">event</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">listener</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@memberof <span class="variable">EventEmitter</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  off(event, listener) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._eventsMap[event]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!listener) &#123;</span><br><span class="line">        <span class="keyword">this</span>._eventsMap[event] = []</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._eventsMap[event] = <span class="keyword">this</span>._eventsMap[event].filter(<span class="function"><span class="params">_listener</span> =&gt;</span> _listener !== listener)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发布订阅模式在JavaScript中非常重要，可以用于模块件的通讯，DOM事件机制就是发布订阅模式的体现。接下来手动实现一个Event模块，实现以下功能&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/t
      
    
    </summary>
    
      <category term="JavaScript进阶" scheme="https://wstreet.github.io/blog/categories/JavaScript%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="https://wstreet.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>canvas实战仪表盘</title>
    <link href="https://wstreet.github.io/blog/2020/07/07/canvas%E5%AE%9E%E6%88%98%E4%BB%AA%E8%A1%A8%E7%9B%98/"/>
    <id>https://wstreet.github.io/blog/2020/07/07/canvas实战仪表盘/</id>
    <published>2020-07-07T08:54:23.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/wstreet/canvas/blob/master/dashboard/index.html" target="_blank" rel="noopener">完整代码</a><br /><br><a href="https://www.yuque.com/streetex/fbqzli" target="_blank" rel="noopener">可视化学习</a><br><img src="https://cdn.nlark.com/yuque/0/2020/gif/211977/1590815221568-be0220ca-71f2-4bfa-9880-c83180259e27.gif#align=left&amp;display=inline&amp;height=142&amp;margin=%5Bobject%20Object%5D&amp;name=GIF%202020-5-30%2013-06-01.gif&amp;originHeight=381&amp;originWidth=476&amp;size=124070&amp;status=done&amp;style=none&amp;width=177" alt="GIF 2020-5-30 13-06-01.gif"><br><br />有动画效果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;canvas id=<span class="string">"canvas"</span> height=<span class="string">"400"</span> width=<span class="string">"400"</span>&gt;&lt;<span class="regexp">/canvas&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>)</span><br><span class="line">    <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> initValue = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="number">91</span> <span class="comment">// 钱多的程度 0-100</span></span><br><span class="line">    <span class="keyword">const</span> valueText = getValueText(value)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修正角度</span></span><br><span class="line">    <span class="keyword">const</span> updateAngle = <span class="number">135</span> / <span class="number">180</span> * <span class="built_in">Math</span>.PI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getValueText</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'太穷了'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'钱很少'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt;= <span class="number">70</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'钱不多'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'一点点'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'首富'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'成仙了'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAngle</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            value = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            value = <span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> angle = value / <span class="number">100</span> * <span class="number">270</span> / <span class="number">180</span> * <span class="built_in">Math</span>.PI</span><br><span class="line">        <span class="keyword">return</span> angle</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame</span><br><span class="line">        || <span class="built_in">window</span>.webkitRequestAnimationFrame</span><br><span class="line">        || <span class="built_in">window</span>.mozRequestAnimationFrame</span><br><span class="line">        || <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123; setTimeout(fn, <span class="number">16.7</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化位置</span></span><br><span class="line">    ctx.translate(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initValue &lt; value) &#123;</span><br><span class="line">            initValue += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算旋转角度</span></span><br><span class="line">        <span class="keyword">const</span> angle = getAngle(initValue)</span><br><span class="line"></span><br><span class="line">        ctx.clearRect(-canvas.width / <span class="number">2</span>, -canvas.width / <span class="number">2</span>, canvas.width, canvas.height)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存初始样式</span></span><br><span class="line">        ctx.save()</span><br><span class="line"></span><br><span class="line">        ctx.rotate(updateAngle)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个环</span></span><br><span class="line">        ctx.strokeStyle = <span class="string">'#f5f9fc'</span></span><br><span class="line">        ctx.lineWidth = <span class="number">40</span></span><br><span class="line">        ctx.lineCap = <span class="string">'butt'</span></span><br><span class="line">        ctx.beginPath()</span><br><span class="line">        ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">270</span> / <span class="number">180</span> * <span class="built_in">Math</span>.PI)</span><br><span class="line">        ctx.stroke()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内环</span></span><br><span class="line">        ctx.fillStyle = <span class="string">'#feffff'</span></span><br><span class="line">        ctx.shadowOffsetX = <span class="number">0</span>;</span><br><span class="line">        ctx.shadowOffsetY = <span class="number">0</span>;</span><br><span class="line">        ctx.shadowBlur = <span class="number">10</span>;</span><br><span class="line">        ctx.shadowColor = <span class="string">"#eceef2"</span>;</span><br><span class="line">        ctx.beginPath()</span><br><span class="line">        ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">        ctx.fill()</span><br><span class="line">        ctx.rotate(-updateAngle)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// valueText</span></span><br><span class="line">        ctx.font = <span class="string">'12px serif'</span>;</span><br><span class="line">        ctx.fillStyle = <span class="string">'#1f2348'</span></span><br><span class="line">        ctx.fillText(valueText, <span class="number">-12</span>, <span class="number">16</span>)</span><br><span class="line">        ctx.save()</span><br><span class="line"></span><br><span class="line">        ctx.rotate(updateAngle)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 外环 加动画</span></span><br><span class="line">        <span class="keyword">const</span> lineargradient = ctx.createLinearGradient(<span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">        lineargradient.addColorStop(<span class="number">0</span>, <span class="string">'#8fe9d7'</span>);</span><br><span class="line">        lineargradient.addColorStop(<span class="number">1</span>, <span class="string">'#21d9b4'</span>);</span><br><span class="line">        ctx.strokeStyle = lineargradient</span><br><span class="line">        ctx.lineWidth = <span class="number">20</span> <span class="comment">// lineWidth一分为二，里外各占一半</span></span><br><span class="line">        ctx.lineCap = <span class="string">'round'</span></span><br><span class="line"></span><br><span class="line">        ctx.beginPath()</span><br><span class="line"></span><br><span class="line">        ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">0</span>, angle)</span><br><span class="line">        ctx.stroke()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 三角 加动画</span></span><br><span class="line">        ctx.beginPath()</span><br><span class="line">        ctx.rotate(angle)</span><br><span class="line">        ctx.translate(<span class="number">40</span>, <span class="number">0</span>)</span><br><span class="line">        ctx.fillStyle = <span class="string">'#abb2c1'</span></span><br><span class="line">        ctx.moveTo(<span class="number">0</span>, <span class="number">-6</span>)</span><br><span class="line">        ctx.lineTo(<span class="number">8</span>, <span class="number">0</span>)</span><br><span class="line">        ctx.lineTo(<span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">        ctx.closePath()</span><br><span class="line">        ctx.fill()</span><br><span class="line"></span><br><span class="line">        ctx.restore()</span><br><span class="line">        ctx.fillStyle = <span class="string">'#1f2348'</span></span><br><span class="line">        ctx.font = <span class="string">'30px serif'</span>;</span><br><span class="line">        ctx.fillText(initValue, <span class="number">-12</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        requestAnimationFrame(draw)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    draw()</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/wstreet/canvas/blob/master/dashboard/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;完整代码&lt;/a&gt;&lt;br /&gt;&lt;br&gt;&lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="canvas" scheme="https://wstreet.github.io/blog/categories/canvas/"/>
    
    
      <category term="canvas" scheme="https://wstreet.github.io/blog/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Debug下查看webpack编译过程</title>
    <link href="https://wstreet.github.io/blog/2020/06/23/Debug%E4%B8%8B%E6%9F%A5%E7%9C%8Bwebpack%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <id>https://wstreet.github.io/blog/2020/06/23/Debug下查看webpack编译过程/</id>
    <published>2020-06-23T23:08:29.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道在浏览器的source面板中可以进行断点调试，但是webpack编译过程是在Nodejs环境中进行的，怎么才能打断点查看编译过程呢？<br /><br><br />vscode提供了断点调试功能，包括Chrome和Nodejs，下面介绍一下怎么去配置<br />1、首先用vscode打开你要调试的项目<br />2、键盘F5键或者点击菜单（Run-&gt;Start Debugging），会出现下图<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/211977/1591275442418-1dc8ea4a-493b-4c08-ab6b-b4ad1966cddc.png#align=left&amp;display=inline&amp;height=188&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=376&amp;originWidth=508&amp;size=25660&amp;status=done&amp;style=none&amp;width=254" alt="image.png"><br />然后点击创建一个launch.js文件，内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"node"</span>, <span class="comment">// node环境</span></span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Launch Program"</span>,</span><br><span class="line">            <span class="attr">"skipFiles"</span>: [</span><br><span class="line">                <span class="string">"&lt;node_internals&gt;/**"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;\\index.js"</span> <span class="comment">// 开始执行的文件</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后检查type对应的环境和program对应的开始执行文件，在你的index.js文件相应的位置打上debugger，再次按F5，就会从index.js开始执行到debugger的地方<br /><br><br />下面用webpack编译举个例子<br />1、创建一个文件夹 <code>webpack-debug</code> ,    运行 <code>npm init -y</code> ,然后 <code>npm i webpack -D</code> <br />2、在根目录下创建一个app.js文件，简单添加点内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="string">'app'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app</span><br></pre></td></tr></table></figure></p><p><br />3、配置webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'none'</span>,</span><br><span class="line">    entry: <span class="string">'./app.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        path: __dirname + <span class="string">'/lib'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4、添加启动脚本文件start.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">debugger</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">debugger</span></span><br><span class="line"></span><br><span class="line">compiler.run(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>5、根据前面介绍的添加launch.json文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Launch Program"</span>,</span><br><span class="line">            <span class="attr">"skipFiles"</span>: [</span><br><span class="line">                <span class="string">"&lt;node_internals&gt;/**"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;\\start.js"</span> <span class="comment">// 从start.js开始启动</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>6、F5进行调试<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/211977/1591276773092-bbe6bda2-491c-4db8-bff0-a8799e2e6371.png#align=left&amp;display=inline&amp;height=422&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=843&amp;originWidth=1259&amp;size=190426&amp;status=done&amp;style=none&amp;width=629.5" alt="image.png"><br /><br><br />可以使用step into <img src="https://cdn.nlark.com/yuque/0/2020/png/211977/1591276862852-b9dd8b5f-bcad-4fba-ac09-c7ce6ee27d21.png#align=left&amp;display=inline&amp;height=44&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=87&amp;originWidth=339&amp;size=5696&amp;status=done&amp;style=none&amp;width=169.5" alt="image.png">查看每一步调用</p><p>本节代码：<a href="https://github.com/wstreet/webpack-debug" target="_blank" rel="noopener">链接</a></p><p>webpack基本原理可查看这篇：<a href="https://www.yuque.com/streetex/msp6tb/dgx90d" target="_blank" rel="noopener">webpack基本原理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道在浏览器的source面板中可以进行断点调试，但是webpack编译过程是在Nodejs环境中进行的，怎么才能打断点查看编译过程呢？&lt;br /&gt;&lt;br&gt;&lt;br /&gt;vscode提供了断点调试功能，包括Chrome和Nodejs，下面介绍一下怎么去配置&lt;br /&gt;1、
      
    
    </summary>
    
      <category term="webpack" scheme="https://wstreet.github.io/blog/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://wstreet.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>二维矩阵变换</title>
    <link href="https://wstreet.github.io/blog/2020/06/17/%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E5%8F%98%E6%8D%A2/"/>
    <id>https://wstreet.github.io/blog/2020/06/17/二维矩阵变换/</id>
    <published>2020-06-17T22:36:08.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<p>矩阵变换是一种线性变换，线段变换后仍是线段，并且原点不会改变<br /></p><p><a name="y6dvY"></a></p><h2 id="数学中的矩阵计算"><a href="#数学中的矩阵计算" class="headerlink" title="数学中的矩阵计算"></a>数学中的矩阵计算</h2><p>矩阵计算包括加法、减法、乘法、共轭、转置等，在平面图形中主要介绍点乘。矩阵的乘法满足以下运算律：<br /><br><br /><strong>结合律：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2020/svg/211977/1592321884960-a840a57a-73ca-40bf-a567-c1ea5ae7f783.svg#align=left&amp;display=inline&amp;height=24&amp;margin=%5Bobject%20Object%5D&amp;originHeight=24&amp;originWidth=162&amp;size=0&amp;status=done&amp;style=none&amp;width=162" alt=""><br /><strong>左分配律：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2020/svg/211977/1592321884879-6da84ab5-f4a7-4f57-8eae-00ab72d19772.svg#align=left&amp;display=inline&amp;height=24&amp;margin=%5Bobject%20Object%5D&amp;originHeight=24&amp;originWidth=206&amp;size=0&amp;status=done&amp;style=none&amp;width=206" alt=""><br /><strong>右分配律：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2020/svg/211977/1592321884926-98556cb0-0455-4ec6-9ed5-59753fec2d71.svg#align=left&amp;display=inline&amp;height=24&amp;margin=%5Bobject%20Object%5D&amp;originHeight=24&amp;originWidth=206&amp;size=0&amp;status=done&amp;style=none&amp;width=206" alt=""><br /></p><p><a name="b07Dp"></a></p><h2 id="齐次坐标"><a href="#齐次坐标" class="headerlink" title="齐次坐标"></a>齐次坐标</h2><p>齐次坐标使用(x, y, w)描述，等价与二维坐标(x/w, y/w)，如果w = 1，就可以当二维坐标使用，w的值必须大于等于0。如果w趋近于0，那么它表示的点将趋近无穷远，所以在齐次坐标系中可以有无穷的概念，齐次坐标的存在，使得用矩阵乘法来描述顶点变换成为可能。</p><blockquote><p>来源于WebGL编程指南</p></blockquote><p><a name="OROO1"></a></p><h2 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h2><p>对于一点V(x, y)在平面上向x方向平移dx，向y方向平移dy，如果矩阵的加法表示：<br />V = <img src="https://cdn.nlark.com/yuque/__latex/143ff58166d34dc70012218424c1617f.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dx%5C%5Cy%5C%5C%20%5Cend%7Bbmatrix%7D&amp;height=45&amp;width=32" alt="">,   M = <img src="https://cdn.nlark.com/yuque/__latex/f3aa3922109adeaa4c86eea720e01d2b.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Ddx%5C%5Cdy%5C%5C%20%5Cend%7Bbmatrix%7D&amp;height=45&amp;width=41" alt=""><br />则平移后V’ = V + M = <img src="https://cdn.nlark.com/yuque/__latex/5c6021e16849740ec8b90d658557f07b.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dx%20%2B%20dx%5C%5Cy%2Bdy%5C%5C%20%5Cend%7Bbmatrix%7D&amp;height=45&amp;width=71" alt="">,对应点V’(x+dx, y+dy)</p><p>如果用点乘表示则：</p><p>V = <img src="https://cdn.nlark.com/yuque/__latex/44b5000221fa826174e77b53e124eafc.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dx%5C%5Cy%5C%5C1%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=37" alt="">,   M = <img src="https://cdn.nlark.com/yuque/__latex/ea60306c89932a5916d857fa38649630.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7D1%260%26dx%20%5C%5C0%261%26dy%5C%5C0%260%261%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=96" alt=""><br />点V经过矩阵M变换后表示：<br />V’ = M·V = <img src="https://cdn.nlark.com/yuque/__latex/ea60306c89932a5916d857fa38649630.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7D1%260%26dx%20%5C%5C0%261%26dy%5C%5C0%260%261%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=96" alt="">·<img src="https://cdn.nlark.com/yuque/__latex/44b5000221fa826174e77b53e124eafc.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dx%5C%5Cy%5C%5C1%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=37" alt=""> = <img src="https://cdn.nlark.com/yuque/__latex/fbe884ed0dbae4948e1a6f6ab0f32167.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dx%20%2B%20dx%5C%5Cy%20%2B%20dy%5C%5C1%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=76" alt="">，所以变换后的点V’(x+dx, y+dy)</p><p><a name="9xvzt"></a></p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>直线的缩放是点的缩放，假如有点V(x, y)，经过缩放矩阵M = <img src="https://cdn.nlark.com/yuque/__latex/37a96752e7f549b76f31c348ad89e3d0.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dsx%260%260%20%5C%5C0%26sy%260%5C%5C0%260%261%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=103" alt="">变换，则得到点V’<br />V’ = M ·V = <img src="https://cdn.nlark.com/yuque/__latex/37a96752e7f549b76f31c348ad89e3d0.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dsx%260%260%20%5C%5C0%26sy%260%5C%5C0%260%261%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=103" alt="">·<img src="https://cdn.nlark.com/yuque/__latex/44b5000221fa826174e77b53e124eafc.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dx%5C%5Cy%5C%5C1%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=37" alt=""> = <img src="https://cdn.nlark.com/yuque/__latex/e5fe799973d046b5c28e3fa49ea3109d.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dsx%2Ax%20%5C%5Csy%2Ay%5C%5C1%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=70" alt="">,得到点V’(sx<em>x, sy</em>y)</p><p><a name="E8hc7"></a></p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/211977/1592323489719-6f865b7a-4492-43b5-b271-3ba2ce59c79e.png#align=left&amp;display=inline&amp;height=267&amp;margin=%5Bobject%20Object%5D&amp;name=71080-20171116101008734-1171446672.png&amp;originHeight=267&amp;originWidth=273&amp;size=18308&amp;status=done&amp;style=none&amp;width=273" alt="71080-20171116101008734-1171446672.png"></p><p>旋转是基于原点的旋转，假如有点V(x, y)，经过旋转矩阵M = <img src="https://cdn.nlark.com/yuque/__latex/b4829dedb886227240900e48329e560a.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dcos%CE%B8%26-sin%CE%B8%260%20%5C%5Csin%CE%B8%26cos%CE%B8%260%5C%5C0%260%261%20%5Cend%7Bbmatrix%7D&amp;height=66&amp;width=146" alt="">变换后，得到点V’<br />V’ = M·V = <img src="https://cdn.nlark.com/yuque/__latex/b4829dedb886227240900e48329e560a.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dcos%CE%B8%26-sin%CE%B8%260%20%5C%5Csin%CE%B8%26cos%CE%B8%260%5C%5C0%260%261%20%5Cend%7Bbmatrix%7D&amp;height=66&amp;width=146" alt="">·<img src="https://cdn.nlark.com/yuque/__latex/44b5000221fa826174e77b53e124eafc.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dx%5C%5Cy%5C%5C1%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=37" alt=""> = <img src="https://cdn.nlark.com/yuque/__latex/ec8e0071191b7f871f80280ae5a1758f.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dx%2Acos%CE%B8%20-%20y%2Asin%CE%B8%5C%5Cx%2Asin%CE%B8%2Bycos%CE%B8%5C%5C1%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=160" alt="">,得到点V’(x<em>cosθ - y</em>sinθ, x*sinθ+ycosθ)</p><p><a name="nWLbT"></a></p><h2 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h2><p>可以将以上三种矩阵合在一起对平面图形进行矩阵变换，M = <img src="https://cdn.nlark.com/yuque/__latex/4a2e3046790d79d12b2170447ebd48a3.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7D%0A%20a%20%26%20c%20%26%20e%20%5C%5C%0A%20b%20%26%20d%20%26%20f%20%5C%5C%0A%200%20%26%200%20%26%201%20%20%0A%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=88" alt="">。<br />a (<em>m11</em>)：水平方向的缩放<br />b (<em>m12</em>)：水平方向的倾斜偏移<br />c (<em>m21</em>)：竖直方向的倾斜偏移<br />d (<em>m22</em>)：竖直方向的缩放<br />e (_dx_)：水平方向的移动<br />f (_dy_)：竖直方向的移动</p><p><a name="gyoR8"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>平移矩阵：M = <img src="https://cdn.nlark.com/yuque/__latex/ea60306c89932a5916d857fa38649630.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7D1%260%26dx%20%5C%5C0%261%26dy%5C%5C0%260%261%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=96" alt=""><br />缩放矩阵：M = <img src="https://cdn.nlark.com/yuque/__latex/37a96752e7f549b76f31c348ad89e3d0.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dsx%260%260%20%5C%5C0%26sy%260%5C%5C0%260%261%20%5Cend%7Bbmatrix%7D&amp;height=69&amp;width=103" alt=""><br />旋转矩阵：M = <img src="https://cdn.nlark.com/yuque/__latex/b4829dedb886227240900e48329e560a.svg#card=math&amp;code=%5Cbegin%7Bbmatrix%7Dcos%CE%B8%26-sin%CE%B8%260%20%5C%5Csin%CE%B8%26cos%CE%B8%260%5C%5C0%260%261%20%5Cend%7Bbmatrix%7D&amp;height=66&amp;width=146" alt=""><br /><br><br /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;矩阵变换是一种线性变换，线段变换后仍是线段，并且原点不会改变&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;y6dvY&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;数学中的矩阵计算&quot;&gt;&lt;a href=&quot;#数学中的矩阵计算&quot; class=&quot;headerlink&quot; title=&quot;数学中的
      
    
    </summary>
    
      <category term="canvas" scheme="https://wstreet.github.io/blog/categories/canvas/"/>
    
      <category term="svg" scheme="https://wstreet.github.io/blog/categories/canvas/svg/"/>
    
    
      <category term="canvas" scheme="https://wstreet.github.io/blog/tags/canvas/"/>
    
      <category term="svg" scheme="https://wstreet.github.io/blog/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>如何在canvas内部元素上监听事件</title>
    <link href="https://wstreet.github.io/blog/2020/06/16/%E5%A6%82%E4%BD%95%E5%9C%A8canvas%E5%86%85%E9%83%A8%E5%85%83%E7%B4%A0%E4%B8%8A%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6/"/>
    <id>https://wstreet.github.io/blog/2020/06/16/如何在canvas内部元素上监听事件/</id>
    <published>2020-06-16T23:08:23.000Z</published>
    <updated>2021-11-27T07:05:05.955Z</updated>
    
    <content type="html"><![CDATA[<p>完整代码：<a href="https://github.com/wstreet/canvas-event" target="_blank" rel="noopener">链接</a><br />Demo：<a href="https://wstreet.github.io/canvas-event/">链接</a><br /><br><br />首先canvas绘图是要有一个 <code>&lt;canvas&gt;&lt;/canvas&gt;</code> 标签的，然后使用脚本取绘制。<code>&lt;canvas&gt;&lt;/canvas&gt;</code>  就是一个dom节点，所以我们可以在这个节点上监听一些事件，比如click。但是这样存在问题，点击画布中的任意一个地方，都会触发click事件，现在我只想点击画布中的rect时才触发click事件，该怎么做呢？其实很简单，通过以下几个步骤就可以实现。</p><blockquote><p>这里只是用click事件和rect图形举例，其他事件和shape可以用同样的方法实现。</p></blockquote><ul><li>实现一个带有自定义监听(on)、触发(emit)功能的Rect类</li><li>用Rect类创建一个实例rect，并在rect上用on方法监听click事件</li><li>在canvas上用addEventListener监听click事件，handler中获取当前触发事件的点的坐标，判断是否在rect内部，如果在，用emit方法触发rect上绑定的事件处理函数</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/211977/1591531886533-52fa5131-0b3f-435e-967c-6c3c71f4cfa3.png#align=left&amp;display=inline&amp;height=504&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=720&amp;originWidth=1065&amp;size=55729&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p><p>一、Rect<br />事件机制Event<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>._listener = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 监听</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">type</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;function&#125;</span> <span class="variable">handler</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@memberof <span class="variable">Event</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  on(type, handler) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._listener[type]) &#123;</span><br><span class="line">      <span class="keyword">this</span>._listener[type] = []</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>._listener[type].push(handler)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *触发</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">type</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">event</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@memberof <span class="variable">Event</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  emit(type, event) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event == <span class="literal">null</span> || event.type == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> typeListeners = <span class="keyword">this</span>._listener[type]</span><br><span class="line">    <span class="keyword">if</span> (!typeListeners) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; typeListeners.length; index++) &#123;</span><br><span class="line">      <span class="keyword">const</span> handler = typeListeners[index];</span><br><span class="line">      </span><br><span class="line">      handler(event)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">type</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">handler</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@memberof <span class="variable">Event</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  remove(type, handler) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!handler) &#123;</span><br><span class="line">      <span class="keyword">this</span>._listener[type] = []</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._listener[type]) &#123;</span><br><span class="line">      <span class="keyword">const</span> listeners = <span class="keyword">this</span>._listeners[type];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = listeners.length; i &lt; len; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (listeners[i] === listener) &#123;</span><br><span class="line">              listeners.splice(i, <span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Event</span><br></pre></td></tr></table></figure><br>绘制矩形Rect继承Event<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Event <span class="keyword">from</span> <span class="string">'./Event.js'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(opts, canvas) &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.canvas = canvas</span><br><span class="line">        <span class="keyword">this</span>.config = opts</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    draw() &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="keyword">this</span>.canvas.ctx</span><br><span class="line">        <span class="keyword">const</span> &#123; x, y, width, height, fillStyle &#125; = <span class="keyword">this</span>.config</span><br><span class="line">        ctx.fillStyle = fillStyle</span><br><span class="line">        ctx.fillRect(x, y, width, height)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isEventInRegion(clientX, clientY) &#123;</span><br><span class="line">        <span class="keyword">const</span> point = <span class="keyword">this</span>.getEventPosition(clientX, clientY); <span class="comment">// 计算基于canvas坐标系的坐标值</span></span><br><span class="line">        <span class="keyword">const</span> &#123; x, y, width, height &#125; = <span class="keyword">this</span>.config</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            x &lt; point.x </span><br><span class="line">            &amp;&amp; point.x &lt; x + width </span><br><span class="line">            &amp;&amp; y &lt; point.y </span><br><span class="line">            &amp;&amp; point.y &lt; y + height</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getEventPosition(clientX, clientY) &#123;</span><br><span class="line">        <span class="keyword">const</span> bbox = <span class="keyword">this</span>.canvas.canvas.getBoundingClientRect();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            x: clientX - bbox.left,</span><br><span class="line">            y: clientY - bbox.top</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Rect</span><br></pre></td></tr></table></figure><br>我们实现一个Rect类，将ctx.fillRect方法封装在draw方法中，在需要的时候去调用<br /><br><br />二、创建Canvas类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Event <span class="keyword">from</span> <span class="string">'./Event.js'</span></span><br><span class="line"><span class="keyword">import</span> Rect <span class="keyword">from</span> <span class="string">'./Rect.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eventList = [</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  <span class="string">'mousemove'</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Canvas</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">  defaultOpts = &#123;&#125;</span><br><span class="line">  <span class="keyword">constructor</span>(c) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.canvas = c</span><br><span class="line">    <span class="keyword">this</span>.ctx = c.getContext(<span class="string">'2d'</span>)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">this</span>.children = []</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addChild(shape) &#123;</span><br><span class="line">    <span class="keyword">this</span>.children.push(shape)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="keyword">this</span>.children.forEach(<span class="function"><span class="params">shape</span> =&gt;</span> shape.draw())</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  rect(config) &#123;</span><br><span class="line">    <span class="keyword">const</span> rect = <span class="keyword">new</span> Rect(config, <span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.addChild(rect)</span><br><span class="line">    <span class="keyword">return</span> rect</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Canvas</span><br></pre></td></tr></table></figure><br>首先使用Canvas类创建一个实例，参数是canvas节点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="keyword">new</span> Canvas(<span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>))</span><br></pre></td></tr></table></figure><br>然后使用canvas.rect(config)创建一个rect，并监听click事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rect = canvas.rect(&#123;</span><br><span class="line">        x: <span class="number">0</span>,</span><br><span class="line">        y: <span class="number">0</span>,</span><br><span class="line">        width: <span class="number">150</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">        fillStyle: <span class="string">'#ccc'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">rect.on(<span class="string">'click'</span>, (event) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'rect1 click'</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><br>现在已经在rect上监听了click事件，接下来就要考虑，在什么时候emit。答案很简单，click事件触发点在rect内部的时候。我们在Rect类中添加两个方法，getEventPosition方法将point的坐标从基于浏览器窗口转换成基于canvas，isEventInRegion方法判断当前事件触发点是否在rect内部。</p><p>转换后的坐标point(px, py)，px = clientX - bbox.left，py = clientY - bbox.top<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Event <span class="keyword">from</span> <span class="string">'./Event.js'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(opts, canvas) &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.canvas = canvas</span><br><span class="line">        <span class="keyword">this</span>.config = opts</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    draw() &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="keyword">this</span>.canvas.ctx</span><br><span class="line">        <span class="keyword">const</span> &#123; x, y, width, height, fillStyle &#125; = <span class="keyword">this</span>.config</span><br><span class="line">        ctx.fillStyle = fillStyle</span><br><span class="line">        ctx.fillRect(x, y, width, height)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isEventInRegion(clientX, clientY) &#123;</span><br><span class="line">        <span class="keyword">const</span> point = <span class="keyword">this</span>.getEventPosition(clientX, clientY); <span class="comment">// 计算基于canvas坐标系的坐标值</span></span><br><span class="line">        <span class="keyword">const</span> &#123; x, y, width, height &#125; = <span class="keyword">this</span>.config</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            x &lt; point.x </span><br><span class="line">            &amp;&amp; point.x &lt; x + width </span><br><span class="line">            &amp;&amp; y &lt; point.y </span><br><span class="line">            &amp;&amp; point.y &lt; y + height</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getEventPosition(clientX, clientY) &#123;</span><br><span class="line">        <span class="keyword">const</span> bbox = <span class="keyword">this</span>.canvas.canvas.getBoundingClientRect();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            x: clientX - bbox.left,</span><br><span class="line">            y: clientY - bbox.top</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Rect</span><br></pre></td></tr></table></figure><br>三、事件派发<br />在canvas上用addEventListener监听click事件，事件触发后使用rect.isEventInRegion()方法判断是否去做事件派发，如果事件触发点在rect内部，使用rect.emit(event)触发执行handler。实现一个initEvent方法，在实例化canvas的时候去执行他<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Event <span class="keyword">from</span> <span class="string">'./Event.js'</span></span><br><span class="line"><span class="keyword">import</span> Rect <span class="keyword">from</span> <span class="string">'./Rect.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eventList = [</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  <span class="string">'mousemove'</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Canvas</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">  defaultOpts = &#123;&#125;</span><br><span class="line">  <span class="keyword">constructor</span>(c) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.canvas = c</span><br><span class="line">    <span class="keyword">this</span>.ctx = c.getContext(<span class="string">'2d'</span>)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">this</span>.children = []</span><br><span class="line">    <span class="keyword">this</span>.initEvent()</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initEvent() &#123;</span><br><span class="line">    eventList.forEach(<span class="function"><span class="params">eventName</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.canvas.addEventListener(eventName, <span class="keyword">this</span>.handleEvent)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleEvent = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.children</span><br><span class="line">    .filter(<span class="function"><span class="params">shape</span> =&gt;</span> shape.isEventInRegion(event.x, event.y))</span><br><span class="line">    .forEach(<span class="function"><span class="params">shape</span> =&gt;</span> shape.emit(event.type, event))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addChild(shape) &#123;</span><br><span class="line">    <span class="keyword">this</span>.children.push(shape)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="keyword">this</span>.children.forEach(<span class="function"><span class="params">shape</span> =&gt;</span> shape.draw())</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  rect(config) &#123;</span><br><span class="line">    <span class="keyword">const</span> rect = <span class="keyword">new</span> Rect(config, <span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.addChild(rect)</span><br><span class="line">    <span class="keyword">return</span> rect</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Canvas</span><br></pre></td></tr></table></figure></p><p><br />总结：平时在开发中一定会出现一种场景，就是只想在某个shape上触发某个事件，而不是在canvas上任意一个地方都能触发。canvas本身的机制是只能在canvas上监听事件，子元素没法监听，我们将子元素进行封装一下，自定义一个事件机制，然后在监听canvas的handler中去做处理，符合条件其触发子元素的事件监听。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;完整代码：&lt;a href=&quot;https://github.com/wstreet/canvas-event&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt;&lt;br /&gt;Demo：&lt;a href=&quot;https://wstreet.github.io
      
    
    </summary>
    
      <category term="canvas" scheme="https://wstreet.github.io/blog/categories/canvas/"/>
    
    
      <category term="canvas" scheme="https://wstreet.github.io/blog/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Promise实现</title>
    <link href="https://wstreet.github.io/blog/2020/05/16/Promise%E5%AE%9E%E7%8E%B0/"/>
    <id>https://wstreet.github.io/blog/2020/05/16/Promise实现/</id>
    <published>2020-05-16T22:02:22.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  工具方法</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> getType = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value).match(<span class="regexp">/^\[object (.*)\]$/</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isFuntion = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> getType(value) === <span class="string">'Function'</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  Promise开始</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(handler) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = PENDING</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.callbacks = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      handler(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">this</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state !== PENDING) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = FULFILLED</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.excuteCallBacks()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state !== PENDING) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = REJECTED</span><br><span class="line">    <span class="keyword">this</span>.value = reason</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.excuteCallBacks()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  handleCallback = <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; onFulfilled, onRejected, resolve, reject &#125; = callback</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === FULFILLED) &#123;</span><br><span class="line">      isFuntion(onFulfilled) ? resolve(onFulfilled(<span class="keyword">this</span>.value)) : resolve(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === REJECTED) &#123;</span><br><span class="line">      isFuntion(onRejected) ? reject(onRejected(<span class="keyword">this</span>.value)) : reject(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  excuteCallBacks = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.callbacks.forEach(<span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.handleCallback(callback)</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  then = <span class="function">(<span class="params">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> callback = &#123; onFulfilled, onRejected, resolve, reject &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">        <span class="keyword">this</span>.callbacks.push(callback)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.handleCallback(callback)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span> = <span class="function">(<span class="params">onRejected</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> onFulfilled = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> callback = &#123; onFulfilled, onRejected, resolve, reject &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">        <span class="keyword">this</span>.callbacks.push(callback)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.handleCallback(callback)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">finally</span> = <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(</span><br><span class="line">      value =&gt; MyPromise.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> value),</span><br><span class="line">      reason =&gt; MyPromise.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> resolve(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(reason))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 所有结果fulfilled</span></span><br><span class="line">  <span class="keyword">static</span> all = <span class="function">(<span class="params">promiseList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; promiseList.length; index++) &#123;</span><br><span class="line">        <span class="keyword">const</span> promise = promiseList[index];</span><br><span class="line">        promise.then(</span><br><span class="line">          res =&gt; &#123;</span><br><span class="line">            result.push(res)</span><br><span class="line">            count =+ <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count === promiseList.length) &#123;</span><br><span class="line">              resolve(result)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          reason =&gt; &#123;</span><br><span class="line">            reject(reason)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回先有结果的promise的值，不管是fulfilled还是rejected</span></span><br><span class="line">  <span class="keyword">static</span> race = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; promiseList.length; index++) &#123;</span><br><span class="line">        <span class="keyword">const</span> promise = promiseList[index];</span><br><span class="line">        promise.then(</span><br><span class="line">          res =&gt; &#123;</span><br><span class="line">            resolve(res)</span><br><span class="line">          &#125;,</span><br><span class="line">          reason =&gt; &#123;</span><br><span class="line">            reject(reason)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任意一个变成fulfilled，结果是fulfilled</span></span><br><span class="line">  <span class="keyword">static</span> any = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; promiseList.length; index++) &#123;</span><br><span class="line">        <span class="keyword">const</span> promise = promiseList[index];</span><br><span class="line">        promise.then(</span><br><span class="line">          res =&gt; &#123;</span><br><span class="line">            resolve(res)</span><br><span class="line">          &#125;,</span><br><span class="line">          reason =&gt; &#123;</span><br><span class="line">            result.push(res)</span><br><span class="line">            count =+ <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count === promiseList.length) &#123;</span><br><span class="line">              reject(reason)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="JavaScript进阶" scheme="https://wstreet.github.io/blog/categories/JavaScript%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="https://wstreet.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>svg基本形状元素</title>
    <link href="https://wstreet.github.io/blog/2020/05/07/svg%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E5%85%83%E7%B4%A0/"/>
    <id>https://wstreet.github.io/blog/2020/05/07/svg基本形状元素/</id>
    <published>2020-05-07T10:07:03.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本形状元素"><a href="#基本形状元素" class="headerlink" title="基本形状元素"></a>基本形状元素</h1><p>基本形状元素允许的内容物：任意数量、任意排序的动画元素、描述性元素<br /><br><br /><code>circle</code>: svg元素，是一个svg的基本形状，用来创建一个圆，指定圆心和半径<br />允许的内容物：任意数量和任意排序的动画元素、描述性元素<br />属性：cx，cy，r，cx和cy指定圆心，r指定半径<br />例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">"0 0 120 120"</span> <span class="attr">version</span>=<span class="string">"1.1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"60"</span> <span class="attr">cy</span>=<span class="string">"60"</span> <span class="attr">r</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote></blockquote><blockquote><p>viewBox的四个参数分别代表：最小X轴数值；最小y轴数值；宽度；高度。</p></blockquote><p> <code>ellipse</code>：svg基本形状，创建一个椭圆，基于一个中心坐标，以及x半径和y半径<br />允许的内容物：任意数量和任意排序的动画元素、描述性元素<br />属性：cx，cy，rx，ry<br />例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"120"</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">height</span>=<span class="string">"120"</span> <span class="attr">viewPort</span>=<span class="string">"0 0 120 120"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">"60"</span> <span class="attr">cy</span>=<span class="string">"60"</span> <span class="attr">rx</span>=<span class="string">"50"</span> <span class="attr">ry</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><br /><code>line</code>元素是一个SVG基本形状，用来创建一条连接两个点的线。<br />属性：x1,x2,y1,y2<br />例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"20"</span> <span class="attr">y1</span>=<span class="string">"100"</span> <span class="attr">x2</span>=<span class="string">"100"</span> <span class="attr">y2</span>=<span class="string">"100"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">stroke</span>=<span class="string">"black"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>stroke-width：线，文本或元素轮廓厚度，stroke：线，文本或元素轮廓颜色</p></blockquote><p><br /><code>polygon</code> :元素定义了一个由一组首尾相连的直线线段构成的闭合多边形形状。最后一点连接到第一点。<br />属性：point<br />例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"120"</span> <span class="attr">height</span>=<span class="string">"120"</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">viewPort</span>=<span class="string">"0 0 120 120"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">"60,20 100,40 100,80 60,100 20,80 20,40"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><br /><code>polyline</code> :创建一系列直线连接多个点，一个非闭合（最后一点不与第一点相连）的形状<br />属性：point<br />例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"120"</span> <span class="attr">height</span>=<span class="string">"120"</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">viewPort</span>=<span class="string">"0 0 120 120"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">points</span>=<span class="string">"20,100 40,60 70,80 100,20"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><br /><code>rect</code> :用来创建一个矩形，基于一个角位置以及它的宽和高。它还可以用来创建圆角矩形。<br />属性：x, y, width, height, rx, ry<br />例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 简单矩形</span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"120"</span> <span class="attr">height</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">viewBox</span>=<span class="string">"0 0 120 120"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 圆角矩形</span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"120"</span> <span class="attr">height</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">viewBox</span>=<span class="string">"0 0 120 120"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">rx</span>=<span class="string">"15"</span> <span class="attr">ry</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本形状元素&quot;&gt;&lt;a href=&quot;#基本形状元素&quot; class=&quot;headerlink&quot; title=&quot;基本形状元素&quot;&gt;&lt;/a&gt;基本形状元素&lt;/h1&gt;&lt;p&gt;基本形状元素允许的内容物：任意数量、任意排序的动画元素、描述性元素&lt;br /&gt;&lt;br&gt;&lt;br /&gt;&lt;code
      
    
    </summary>
    
      <category term="SVG" scheme="https://wstreet.github.io/blog/categories/SVG/"/>
    
    
      <category term="SVG" scheme="https://wstreet.github.io/blog/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>深浅拷贝</title>
    <link href="https://wstreet.github.io/blog/2020/03/28/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://wstreet.github.io/blog/2020/03/28/深浅拷贝/</id>
    <published>2020-03-28T21:03:28.000Z</published>
    <updated>2021-11-27T07:05:05.955Z</updated>
    
    <content type="html"><![CDATA[<p>js的数据类型有数字、字符串、布尔、null、undefined和对象，其中数字、字符串、布尔、null、undefined属于基本数据类型，对象属于引用数据类型。<br />基本数据类型的存储是存储在栈里的，引用类型是存储在堆里的，然后将堆地址存贮在栈里</p><p><a name="7YyTP"></a></p><h2 id="复杂数据类型引用"><a href="#复杂数据类型引用" class="headerlink" title="复杂数据类型引用"></a>复杂数据类型引用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = obj1</span><br></pre></td></tr></table></figure><p>这种情况我们称为obj1和obj2同时引用对象 <code>{ a: 1 }</code>  的地址</p><p><a name="VP2q0"></a></p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>对于拷贝来说，是将对象的每一个属性都复制给另外一个对象，如果只是复制最外层的属性，不考虑多层嵌套情况，我们称之为<strong>浅拷贝</strong>，例如：<br /></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> shallowCopy = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// copy 动作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copyObj = shallowCopy(obj) <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><p>最后拷贝出来的是另一个对象，obj和copyObj地址不一样，但是对于多层嵌套的对象，想要进行完全拷贝，要进行递归，这就是深拷贝的内容<br /></p><p><a name="4ZifY"></a></p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝是在浅拷贝的基础上，将对象的复杂数据类型的属性进行递归拷贝，实现方法：<br /><br><br /></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数据类型</span></span><br><span class="line"><span class="keyword">const</span> getType = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> objectType = <span class="built_in">Object</span>.prototype.toString.call(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> type = objectType.match(<span class="regexp">/^\[object (.*)\]$/</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> type.toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">const</span> deepCopy  = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> copyValue = value</span><br><span class="line">    <span class="keyword">const</span> type = getType(value)</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'object'</span>) &#123;</span><br><span class="line">        copyValue = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">            copyValue[key] = deepCopy(value[key])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'array'</span>) &#123;</span><br><span class="line">        <span class="comment">// copyValue = []</span></span><br><span class="line">        copyValue = value.map(<span class="function"><span class="params">i</span> =&gt;</span> deepCopy(i))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copyValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">        c: <span class="number">2</span>,</span><br><span class="line">        d: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deepCopy(obj1)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/211977/1585228187857-14c2612e-3a91-40d9-b7de-3b752332875b.png#align=left&amp;display=inline&amp;height=164&amp;name=image.png&amp;originHeight=327&amp;originWidth=373&amp;size=11974&amp;status=done&amp;style=none&amp;width=187" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js的数据类型有数字、字符串、布尔、null、undefined和对象，其中数字、字符串、布尔、null、undefined属于基本数据类型，对象属于引用数据类型。&lt;br /&gt;基本数据类型的存储是存储在栈里的，引用类型是存储在堆里的，然后将堆地址存贮在栈里&lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
      <category term="JavaScript进阶" scheme="https://wstreet.github.io/blog/categories/JavaScript%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="https://wstreet.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>new的模拟实现</title>
    <link href="https://wstreet.github.io/blog/2020/01/02/new%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://wstreet.github.io/blog/2020/01/02/new的模拟实现/</id>
    <published>2020-01-02T21:22:35.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * new 一个构造函数之后，在构造函数内部做了如下几件事</span><br><span class="line"> * 1、创建一个Object实例</span><br><span class="line"> * 2、改变原型链</span><br><span class="line"> * 3、调用构造函数，并将它的this指向第一步创建的实例</span><br><span class="line"> * 4、返回结果</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function myNew() &#123;</span><br><span class="line">    const angs &#x3D; [...arguments]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 1、创建一个实例</span><br><span class="line">    const obj &#x3D; new Object()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 2、改变实例原型链，实现继承</span><br><span class="line">    const Con &#x3D; angs.shift()</span><br><span class="line">    obj.__proto__ &#x3D; Con.prototype</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 调用构造函数，并将内部this指向实例</span><br><span class="line">    const ret &#x3D; Con.aplly(obj, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 如果构造函数返回的结果是对象，则返回这个对象</span><br><span class="line">    &#x2F;&#x2F; 否则返回第一步创建的实例对象</span><br><span class="line">    if (typeof ret &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class="line">        return ret</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="JavaScript进阶" scheme="https://wstreet.github.io/blog/categories/JavaScript%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="https://wstreet.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>模拟class继承</title>
    <link href="https://wstreet.github.io/blog/2019/12/28/%E6%A8%A1%E6%8B%9Fclass%E7%BB%A7%E6%89%BF/"/>
    <id>https://wstreet.github.io/blog/2019/12/28/模拟class继承/</id>
    <published>2019-12-28T17:39:53.000Z</published>
    <updated>2021-11-27T07:05:05.955Z</updated>
    
    <content type="html"><![CDATA[<p>在模拟实现class继承之前，如果还不熟悉JavaScript的继承，可以看一下这篇文章JavaScript继承<br>首先看一下ES6的继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ES6继承</span><br><span class="line">class Animal &#123;</span><br><span class="line">  static footer &#x3D; &#39;footer&#39;</span><br><span class="line">  constructor(opt) &#123;</span><br><span class="line">    this.name &#x3D; opt.name</span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    return this.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cat extends Animal &#123;</span><br><span class="line">  constructor(opt) &#123;</span><br><span class="line">    super(opt)</span><br><span class="line">    this.age &#x3D; opt.age</span><br><span class="line">  &#125;</span><br><span class="line">  getAge() &#123;</span><br><span class="line">    return this.age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const cat &#x3D; new Cat(&#123; name: &#39;miao&#39;, age: 5 &#125;)</span><br></pre></td></tr></table></figure></p><p>在上面代码中，Cat继承Animal，通过使用extends继承Animal原型上的方法，通过super调用父构造函数</p><blockquote><p>关于super：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super</a></p></blockquote><blockquote><p>super([arguments]);<br>// 调用 父对象/父类 的构造函数</p></blockquote><blockquote><p>super.functionOnParent([arguments]);<br>// 调用 父对象/父类 上的方法</p></blockquote><p>我们要想模拟实现ES6继承，关键看ES6 class extends最终转成ES6是什么样，这里急用Babel工具：在线转换，<br>摘出最主要的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">function _inherits(subClass, superClass) &#123;</span><br><span class="line">  if (typeof superClass !&#x3D;&#x3D; &quot;function&quot; &amp;&amp; superClass !&#x3D;&#x3D; null) &#123;</span><br><span class="line">    throw new TypeError(&quot;Super expression must either be null or a function&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  subClass.prototype &#x3D; Object.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">    constructor: &#123; value: subClass, writable: true, configurable: true &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  if (superClass) _setPrototypeOf(subClass, superClass);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; ES6继承</span><br><span class="line">var Animal &#x3D;</span><br><span class="line">  &#x2F;*#__PURE__*&#x2F;</span><br><span class="line">  (function() &#123;</span><br><span class="line">    function Animal(opt) &#123;</span><br><span class="line">      _classCallCheck(this, Animal);</span><br><span class="line">      this.name &#x3D; opt.name;</span><br><span class="line">    &#125;</span><br><span class="line">    _createClass(Animal, [</span><br><span class="line">      &#123;</span><br><span class="line">        key: &quot;getName&quot;,</span><br><span class="line">        value: function getName() &#123;</span><br><span class="line">          return this.name;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]);</span><br><span class="line">    return Animal;</span><br><span class="line">  &#125;)();</span><br><span class="line">_defineProperty(Animal, &quot;footer&quot;, &quot;footer&quot;);</span><br><span class="line">var Cat &#x3D;</span><br><span class="line">  &#x2F;*#__PURE__*&#x2F;</span><br><span class="line">  (function(_Animal) &#123;</span><br><span class="line">    _inherits(Cat, _Animal);</span><br><span class="line">    function Cat(opt) &#123;</span><br><span class="line">      var _this;</span><br><span class="line">      _classCallCheck(this, Cat);</span><br><span class="line">      _this &#x3D; _possibleConstructorReturn(</span><br><span class="line">        this,</span><br><span class="line">        _getPrototypeOf(Cat).call(this, opt)</span><br><span class="line">      );</span><br><span class="line">      _this.age &#x3D; opt.age;</span><br><span class="line">      return _this;</span><br><span class="line">    &#125;</span><br><span class="line">    _createClass(Cat, [</span><br><span class="line">      &#123;</span><br><span class="line">        key: &quot;getAge&quot;,</span><br><span class="line">        value: function getAge() &#123;</span><br><span class="line">          return this.age;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]);</span><br><span class="line">    return Cat;</span><br><span class="line">  &#125;)(Animal);</span><br><span class="line">var cat &#x3D; new Cat(&#123;</span><br><span class="line">  name: &quot;miao&quot;,</span><br><span class="line">  age: 5</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>其中最主要的是 _inherits(Cat, _Animal); 和 _getPrototypeOf(Cat).call(this, opt) ，看到这里我们发现有点像寄生组合式继承。别急，还有跟他不一样的地方.</p><p>我们运行转换后的代码，看一下Cat.<strong>proto</strong><br><img src="https://cdn.nlark.com/yuque/0/2019/png/211977/1577524705049-4c0a8f74-23de-4670-89e3-95639def1ac0.png" alt=""></p><p>发现Cat.<strong>proto</strong>是指向Animal的，在转换后的代码中也能找到对应的地方，就是在_inherits函数最后一句</p><p>所以es6 class的继承实现就是在寄生组合式继承的基础上将子类的<strong>proto</strong>属性指向父类，为什么要这样做？</p><p>因为寄生组合式继承没法继承父类的静态方法</p><p> 模拟实现：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function inherit(Sub, Sup) &#123;</span><br><span class="line">  &#x2F;&#x2F; Object.create和原型式继承一样，返回一个参数对象的副本</span><br><span class="line">  &#x2F;&#x2F; 寄生式继承+原型链继承</span><br><span class="line">  const prototype &#x3D; Object.create(Sup.prototype)</span><br><span class="line">  </span><br><span class="line">  Sub.prototype &#x3D; prototype   &#x2F;&#x2F; 改变子类构造函数的prototype</span><br><span class="line">  Sub.prototype.constructor &#x3D; Sub</span><br><span class="line">  </span><br><span class="line">  Sub.__proto__ &#x3D; Sup</span><br><span class="line">&#125;</span><br><span class="line">function SupType(name) &#123;</span><br><span class="line">  this.name &#x3D; name</span><br><span class="line">  this.colors &#x3D; [&#39;red&#39;]</span><br><span class="line">&#125;</span><br><span class="line">SupType.prototype.getName &#x3D; function()&#123;</span><br><span class="line">  return this.name</span><br><span class="line">&#125;;</span><br><span class="line">function SubType(name,age) &#123;</span><br><span class="line">  this.age &#x3D; age</span><br><span class="line">  &#x2F;&#x2F; 构造函数继承</span><br><span class="line">  SupType.call(this, name)</span><br><span class="line">&#125;</span><br><span class="line">inherit(SubType, SupType)</span><br><span class="line">SubType.prototype.getAge &#x3D; function() &#123;</span><br><span class="line">  return this.age</span><br><span class="line">&#125;</span><br><span class="line">const sub &#x3D; new SubType(&#39;streetex&#39;, 25)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在模拟实现class继承之前，如果还不熟悉JavaScript的继承，可以看一下这篇文章JavaScript继承&lt;br&gt;首先看一下ES6的继承&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="JavaScript进阶" scheme="https://wstreet.github.io/blog/categories/JavaScript%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="https://wstreet.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript继承</title>
    <link href="https://wstreet.github.io/blog/2019/12/22/JavaScript%E7%BB%A7%E6%89%BF/"/>
    <id>https://wstreet.github.io/blog/2019/12/22/JavaScript继承/</id>
    <published>2019-12-22T15:53:39.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0、原型和原型链"><a href="#0、原型和原型链" class="headerlink" title="0、原型和原型链"></a>0、原型和原型链</h2><p>每个构造函数都会有一个prototype属性，指向它的原型对象，原型对象有一个constructor属性，指向构造函数，实例对象会有一个内部属性<strong>proto</strong>指向构造函数的原型对象，原型链就是通过<strong>proto</strong>一形成的一个链接，链接的顶部是Object.prototype，Object.prototype的<strong>proto</strong>属性指向null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name) &#123;</span><br><span class="line">  this.name &#x3D; name</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.getName &#x3D; function() &#123;</span><br><span class="line">    return this.name</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.constructor &#x3D;&#x3D;&#x3D; Animal &#x2F;&#x2F; true</span><br><span class="line">const cat &#x3D; new Animal(&#39;miao&#39;)</span><br><span class="line">cat.__proto__ &#x3D;&#x3D;&#x3D; Animal.prototype &#x2F;&#x2F; true</span><br><span class="line">Object.prototype.__proto__ &#x3D;&#x3D;&#x3D; null &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure></p><h2 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h2><p>我们知道原型链是通过对象的<strong>proto</strong>属性形成的一条链，原型链继承自然是通过<strong>proto</strong>继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name) &#123;</span><br><span class="line">  this.name &#x3D; name</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.getName &#x3D; function() &#123;</span><br><span class="line">    return this.name</span><br><span class="line">&#125;</span><br><span class="line">function Cat(name) &#123;</span><br><span class="line">  if(name) &#123;</span><br><span class="line">    this.name &#x3D; name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 通过改变Cat的prototype属性，来改变Cat实例的__proto__指向</span><br><span class="line">&#x2F;&#x2F; 将Animal的实例赋值给Cat的prototype属性</span><br><span class="line">const animal &#x3D; new Animal(&#39;cat&#39;)</span><br><span class="line">Cat.prototype &#x3D; animal</span><br><span class="line">Cat.prototype.constructor &#x3D; Cat</span><br><span class="line">&#x2F;&#x2F; 可进一步扩展</span><br><span class="line">&#x2F;&#x2F; Cat.prototype.getAge &#x3D; function() &#123;&#125; </span><br><span class="line">const cat &#x3D; new Cat()</span><br><span class="line">cat.getName() &#x2F;&#x2F; cat</span><br><span class="line">const myCat &#x3D; new Cat(&#39;myCat&#39;)</span><br><span class="line">myCat.getName() &#x2F;&#x2F; myCat</span><br></pre></td></tr></table></figure><p>cat和myCat都是Cat构造函数的实例，我们通过给Cat.prototype重新赋值Animal的实例animal,使得cat和myCat的<strong>proto</strong>都指向animal，而animal具有name属性，animal.<strong>proto</strong>指向Animal.prototype，所以最终才可以使用getName获取name。</p><blockquote><p>总结：让子类实例的原型（<strong>proto</strong>）指向父类的一个实例</p></blockquote><blockquote><p>优点：可以继承父类原型对象上的属性和方法</p></blockquote><blockquote><p>缺点：1、父类的引用属性会被所有子类实例共享<br>          2、实例化子类时不能向父类传参</p></blockquote><h2 id="2、构造函数继承"><a href="#2、构造函数继承" class="headerlink" title="2、构造函数继承"></a>2、构造函数继承</h2><p>构造函数继承就是在子类构造函数中执行父类构造函数，并绑定this为子类实例（将父类实例的属性复制到在子类上），上代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name) &#123;</span><br><span class="line">  this.name &#x3D; name</span><br><span class="line">  this.footer &#x3D; &#39;footer&#39;</span><br><span class="line">  this.getName &#x3D; function() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">function Cat(name, age) &#123;</span><br><span class="line">    this.age &#x3D; age</span><br><span class="line">  Animal.call(this, name)</span><br><span class="line">&#125;</span><br><span class="line">const cat &#x3D; new Cat(&#39;miao&#39;, 3)</span><br></pre></td></tr></table></figure><br>如上代码所示，构造函数继承的重点是在子类构造函数中执行父类构造函数Animal.call(this, name)，将父类实例该有的属性都复制过来</p><blockquote><p>总结：重点在于Animal.call(this, name)</p></blockquote><blockquote><p>优点：</p></blockquote><blockquote><p>缺点：1、只能继承父类实例上该有的属性，无法继承父类实例原型上的属性和方法<br>          2、无法复用共有属性和方法，上述例子中，通过实例化Cat创建3个实例，三个实例中都有getName方法，造成内存浪费</p></blockquote><h2 id="3、组合继承"><a href="#3、组合继承" class="headerlink" title="3、组合继承"></a>3、组合继承</h2><p>组合继承从名字就可以看出来他不是新鲜玩意，他是将上述第一种继承（原型链继承）和第二种继承（构造函数继承）组合起来的一种方法，它既可以继承到父类构造函数原型上的共有属性和方法，也可以继承到父类实例自身该有的属性和方法，不多说上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name) &#123;</span><br><span class="line">  this.name &#x3D; name</span><br><span class="line">  this.footer &#x3D; &#39;footer&#39;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.getName &#x3D; function() &#123;</span><br><span class="line">    return this.name</span><br><span class="line">&#125;</span><br><span class="line">function Cat(name, age) &#123;</span><br><span class="line">    this.age &#x3D; age</span><br><span class="line">  &#x2F;&#x2F; 构造函数继承</span><br><span class="line">  Animal.call(this, name)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 原型链继承</span><br><span class="line">const animal &#x3D; new Animal(&#39;cat&#39;)</span><br><span class="line">Cat.prototype &#x3D; animal</span><br><span class="line">&#x2F;&#x2F; 重写Cat.prototype.constructor指向</span><br><span class="line">Cat.prototype.constructor &#x3D; Cat</span><br><span class="line">const cat &#x3D; new Cat(&#39;miao&#39;, 4)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/211977/1576769280383-2b761a5f-0fb2-47c0-85ca-5e2cf49f37f7.png?x-oss-process=image/resize,w_604" alt=""><br><img src="https://cdn.nlark.com/yuque/0/2019/png/211977/1576769449826-b971df11-c280-47c3-97d9-165d19d81ebd.png" alt=""><br>通过上述代码发现，实例cat和其原型cat.<strong>proto</strong>（animal）上都有父类（Animal）实例该有的属性，只不过cat上的属性会屏蔽其原型上的同名属性和方法</p><blockquote><p>总结：将原型链继承和构造函数继承结合起来</p></blockquote><blockquote><p>优点：可以将父类原型对象上的属性、方法和父类实例自身该有的属性、方法都继承过来</p></blockquote><blockquote><p>缺点：子类实例和子类实例原型上存在一部分同名属性和方法，造成内存浪费</p></blockquote><h2 id="4、原型式继承"><a href="#4、原型式继承" class="headerlink" title="4、原型式继承"></a>4、原型式继承</h2><p>原型式继承和Obje.create()方法原理一致，但是又有点区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function extend(obj) &#123;</span><br><span class="line">  function F() &#123;&#125;</span><br><span class="line">  F.prototype &#x3D; obj</span><br><span class="line">  return new F()</span><br><span class="line">&#125;</span><br><span class="line">const person &#x3D; &#123;</span><br><span class="line">  name: &#39;streetex&#39;,</span><br><span class="line">  colors: [&#39;red&#39;]</span><br><span class="line">&#125;</span><br><span class="line">const anotherPerson &#x3D; extend(person) &#x2F;&#x2F; &#123;name: &#39;streetex&#125;</span><br><span class="line">anotherPerson.name &#x3D; &#39;007&#39;</span><br><span class="line">console.log(person.name) &#x2F;&#x2F; &#39;streetex&#39;</span><br><span class="line">anotherPerson.colors.push(&#39;black&#39;)</span><br><span class="line">console.log(person.colors) &#x2F;&#x2F; [&#39;red&#39;, &#39;black&#39;]</span><br></pre></td></tr></table></figure><p>原型式继承和原型链继承差不多，都是通过修改构造函数的prototype为指定对象，但是原型式继承将这种操作包在了函数里边，另外原型式继承实际上是将参数对象person进行了一次浅复制</p><blockquote><p>总结</p></blockquote><blockquote><p>优点：可以复用父类方法</p></blockquote><blockquote><p>缺点：父对象的引用属性会被所有子实例共享；创建子实例时无法传参<br>上述缺点已被修正，就是Object.create方法</p></blockquote><h2 id="5、寄生式继承"><a href="#5、寄生式继承" class="headerlink" title="5、寄生式继承"></a>5、寄生式继承</h2><p>寄生式继承是在原型式继承的基础上进行了增强，怎么增强？上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function extend(obj) &#123;</span><br><span class="line">  function F() &#123;&#125;</span><br><span class="line">  F.prototype &#x3D; obj</span><br><span class="line">  return new F()</span><br><span class="line">&#125;</span><br><span class="line">function create(obj) &#123;</span><br><span class="line">    const anotherObj &#x3D; extend(obj)</span><br><span class="line">  anotherObj.getName &#x3D; function() &#123;</span><br><span class="line">    return this.name</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return anotherObj</span><br><span class="line">&#125;</span><br><span class="line">const person &#x3D; &#123;</span><br><span class="line">  name: &#39;streetex&#39;,</span><br><span class="line">  colors: [&#39;red&#39;]</span><br><span class="line">&#125;</span><br><span class="line">const anotherPerson &#x3D; create(person)</span><br></pre></td></tr></table></figure><p>可以看出寄生式继承是在函数内通过原型式继承创建一个对象，然后进行增强，最后返回</p><blockquote><p>总结：在原型式继承的基础上进行了增强</p></blockquote><blockquote><p>优点：可以复用父类方法，并且可以进行增强</p></blockquote><blockquote><p>缺点：父对象的引用属性会被所有子实例共享；创建子实例时无法传参（和原型式继承一样）</p></blockquote><h2 id="6、寄生组合式继承"><a href="#6、寄生组合式继承" class="headerlink" title="6、寄生组合式继承"></a>6、寄生组合式继承</h2><p>在第3点介绍的组合继是是原型链继承和构造函数继承的组合，它的缺点有一条是父构造函数调用了两次，造成了浪费，我认为寄生组合式继承是寄生式继承、原型链继承和构造函数继承的组合，父构造函数只会调用一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function inherit(Sub, Sup) &#123;</span><br><span class="line">  &#x2F;&#x2F; Object.create和原型式继承一样，返回一个参数对象的副本</span><br><span class="line">  &#x2F;&#x2F; 寄生式继承+原型链继承</span><br><span class="line">    const prototype &#x3D; Object.create(Sup.prototype)</span><br><span class="line">  </span><br><span class="line">  Sub.prototype &#x3D; prototype   &#x2F;&#x2F; 改变子类构造函数的prototype</span><br><span class="line">  Sub.prototype.constructor &#x3D; Sub</span><br><span class="line">&#125;</span><br><span class="line">function SupType(name) &#123;</span><br><span class="line">    this.name &#x3D; name</span><br><span class="line">  this.colors &#x3D; [&#39;red&#39;]</span><br><span class="line">&#125;</span><br><span class="line">SupType.prototype.getName &#x3D; function()&#123;</span><br><span class="line">  return this.name</span><br><span class="line">&#125;;</span><br><span class="line">function SubType(name,age) &#123;</span><br><span class="line">  this.age &#x3D; age</span><br><span class="line">  &#x2F;&#x2F; 构造函数继承</span><br><span class="line">    SupType.call(this, name)</span><br><span class="line">&#125;</span><br><span class="line">inherit(SubType, SupType)</span><br><span class="line">SubType.prototype.getAge &#x3D; function() &#123;</span><br><span class="line">    return this.age</span><br><span class="line">&#125;</span><br><span class="line">const sub &#x3D; new SubType(&#39;streetex&#39;, 25)</span><br></pre></td></tr></table></figure><blockquote><p>优点： </p></blockquote><blockquote><p>缺点：无</p></blockquote><h2 id="7、ES6-Class-extends继承"><a href="#7、ES6-Class-extends继承" class="headerlink" title="7、ES6 Class extends继承"></a>7、ES6 Class extends继承</h2><p>JavaScript是基于原型继承的语言，即使ES6新增了class，他依然是基于原型继承的，class只是一种语法糖，es6中的类继承的关键字式extends，并且在子类中通过调用super方法将父类实例对象上的方法和属性加到子类实例上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">    this.name &#x3D; name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cat extends Animal &#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">typeof Cat &#x2F;&#x2F; function</span><br></pre></td></tr></table></figure></p><p>8、参考文章</p><ul><li><a href="https://segmentfault.com/a/1190000015727237#item-2-7" target="_blank" rel="noopener">一篇文章理解JS继承——原型链/构造函数/组合/原型式/寄生式/寄生组合/Class extends</a></li><li><a href="https://juejin.im/post/5bcb2e295188255c55472db0" target="_blank" rel="noopener">JavaScript常用八种继承方案</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0、原型和原型链&quot;&gt;&lt;a href=&quot;#0、原型和原型链&quot; class=&quot;headerlink&quot; title=&quot;0、原型和原型链&quot;&gt;&lt;/a&gt;0、原型和原型链&lt;/h2&gt;&lt;p&gt;每个构造函数都会有一个prototype属性，指向它的原型对象，原型对象有一个constru
      
    
    </summary>
    
      <category term="JavaScript进阶" scheme="https://wstreet.github.io/blog/categories/JavaScript%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="https://wstreet.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>github actions 自动构建部署hexo blog</title>
    <link href="https://wstreet.github.io/blog/2019/09/04/github-actions-%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2hexo-blog/"/>
    <id>https://wstreet.github.io/blog/2019/09/04/github-actions-自动构建部署hexo-blog/</id>
    <published>2019-09-04T23:53:32.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span> <span class="string">branch</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">Build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy...</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">FOLDER:</span> <span class="string">public</span></span><br><span class="line">          <span class="attr">BUILD_SCRIPT:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">generate</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h2&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="CI/CD" scheme="https://wstreet.github.io/blog/categories/CI-CD/"/>
    
    
      <category term="github_actions" scheme="https://wstreet.github.io/blog/tags/github-actions/"/>
    
      <category term="CI/CD" scheme="https://wstreet.github.io/blog/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>使用webpack构建自己的库并发到npm上</title>
    <link href="https://wstreet.github.io/blog/2019/08/31/%E4%BD%BF%E7%94%A8webpack%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93%E5%B9%B6%E5%8F%91%E5%88%B0npm%E4%B8%8A/"/>
    <id>https://wstreet.github.io/blog/2019/08/31/使用webpack构建自己的库并发到npm上/</id>
    <published>2019-08-31T15:14:25.000Z</published>
    <updated>2021-11-27T07:05:05.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h2><p>前几天看见大佬公众号推文<a href="https://mp.weixin.qq.com/s/PA-p5GewzMh3esSUDLcOTw" target="_blank" rel="noopener">Virtual Dom &amp;&amp; Diff</a>,于是mark下来自己实现了一遍（抄了一遍<a href="https://github.com/wstreet/v-dom" target="_blank" rel="noopener">v-dom</a>），又恰好在这期间学习了如何使用webpack打包自己的库并发布到npm上，于是便将二者结合起来学习，本文章将介绍如何使用webpack构建自己的库。</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack打包的原理是从入口处文件开始查找依赖，并通过你的配置规则，对文件进行整合、转换、压缩等操作。具体的底层实现，笔者将在后面继续学习。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">│  .gitignore</span><br><span class="line">│  index.js <span class="comment">// 从npm上下载后import的文件</span></span><br><span class="line">│  package.json</span><br><span class="line">│  README.md</span><br><span class="line">│  webpack.config.js <span class="comment">// webpack配置文件</span></span><br><span class="line">│</span><br><span class="line">├─dist <span class="comment">// 存放打包后文件的目录</span></span><br><span class="line">└─src <span class="comment">// webpack打包的目录</span></span><br><span class="line">    constant.js</span><br><span class="line">    diff.js <span class="comment">// 入口文件</span></span><br><span class="line">    element.js</span><br><span class="line">    index.js</span><br><span class="line">    listDiff.js</span><br><span class="line">    patch.js</span><br><span class="line">    utils.js</span><br></pre></td></tr></table></figure><p>webpack通过从入口文件src/index.js开始查找依赖文件进行打包，输出到dist目录，当我们从npm上下载这个包之后的使用方法一般是<code>import vdom from &#39;vdom&#39;</code>，这里import的便是从根目录下的index.js中引入的，当然在package.json中也要进行相应的配置。最后输出到dist目录中的有两个文件，一个是没有压缩的<code>vdom.js</code>在开发环境使用，另一个是经过压缩的<code>vdom.min.js</code>在生产环境使用</p><h2 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h2><p>先上车再解释<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="string">'vdom'</span>: <span class="string">'./src/index.js'</span>,</span><br><span class="line">        <span class="string">'vdom.min'</span>: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">        library: <span class="string">"vdom"</span>,</span><br><span class="line">        libraryExport: <span class="string">'default'</span>,</span><br><span class="line">        libraryTarget: <span class="string">'umd'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为dist之后需要输入两份代码，所以我们需要两个入口，并且输出文件的名称也是<code>entry</code>中配的<code>name</code>，但是如果直接用这份配置去打包，最后dist中<code>vdom.js</code>和<code>vdom.min.js</code>都是一样的内容，而且是经过压缩的。</p><p>因为上面的配置没有设置<code>mode</code>，webpack打包时会以<code>production</code>的模式打包</p><p>解决方法：在webpack的配置中加入<code>mode: &#39;none&#39;</code>和<code>optimization</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先 npm install terser-webpack-plugin -D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TerserPlugin = <span class="built_in">require</span>(<span class="string">'terser-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'none'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="string">'vdom'</span>: <span class="string">'./src/index.js'</span>,</span><br><span class="line">        <span class="string">'vdom.min'</span>: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">        library: <span class="string">"vdom"</span>,</span><br><span class="line">        libraryExport: <span class="string">'default'</span>,</span><br><span class="line">        libraryTarget: <span class="string">'umd'</span> <span class="comment">// umd格式</span></span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimize: <span class="literal">true</span>,</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">                include: <span class="regexp">/\.min\.js$/</span> <span class="comment">// 只有匹配到.min.js结尾的文件才会压缩</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"v-dom"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"a demo of v-dom"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="attr">"prepublish"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"terser-webpack-plugin"</span>: <span class="string">"^1.4.1"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.39.2"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.3.7"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.8.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的配置，我们在终端运行<code>npm run build</code>便会将我们的库打包好，剩下的就是发到npm上</p><blockquote><p>uglifyjs-webpack-plugin也能压缩js，但是对于es6并不会转换，而terser-webpack-plugin会将es6语法进行转换</p></blockquote><h2 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h2><p>首先要有npm账号和密码，如果没有账号先去<a href="https://www.npmjs.com/signup" target="_blank" rel="noopener">npm</a>注册，然后在命令行进行登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>输入账号密码进行登陆然后运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></p><p>发布成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲话&quot;&gt;&lt;a href=&quot;#闲话&quot; class=&quot;headerlink&quot; title=&quot;闲话&quot;&gt;&lt;/a&gt;闲话&lt;/h2&gt;&lt;p&gt;前几天看见大佬公众号推文&lt;a href=&quot;https://mp.weixin.qq.com/s/PA-p5GewzMh3esSUDLcOTw
      
    
    </summary>
    
      <category term="webpack" scheme="https://wstreet.github.io/blog/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://wstreet.github.io/blog/tags/webpack/"/>
    
      <category term="npm" scheme="https://wstreet.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Javascript引擎、执行上下文和调用栈</title>
    <link href="https://wstreet.github.io/blog/2019/04/22/javaScriptEngine_context_callStack/"/>
    <id>https://wstreet.github.io/blog/2019/04/22/javaScriptEngine_context_callStack/</id>
    <published>2019-04-22T01:34:00.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>本文旨在记录自己学习V8引擎、执行上下文和调用堆栈是什么，以及他们之间的关系，通过阅读本文，你将会了解JavaScript是如何运行的，在项目中也会编写更好的程序。如有错误请在评论中指出。</p><h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2><p>由 Google 构建的 V8 引擎是开源的，用 C ++ 编写。 此引擎被用在 Google Chrome 中。 与其他引擎不同的是，V8 也被用于流行的 Node.js 中。</p><p>V8引擎是一个比较流行的JavaScript解释器，它主要包含两个重要的组件：</p><ul><li>Memory Heap （内存堆），内存分配的地方</li><li>Call Stack （调用堆栈），码执行时栈帧存放的位置</li></ul><p><img src="http://ww1.sinaimg.cn/large/006NiFm7ly1g2askmgg4bj30sg0lcq3z.jpg" alt="V8"></p><h2 id="执行上下文（Execution-Context）"><a href="#执行上下文（Execution-Context）" class="headerlink" title="执行上下文（Execution Context）"></a>执行上下文（Execution Context）</h2><p>引擎在加载完代码后会解析代码，创建一个执行环境，形成一个作用域，这个执行环境便是执行上下文。<br>执行上下文分为3中：</p><ul><li>全局执行上下文（全局作用域）</li><li>函数内部执行上下文（局部作用域）</li><li>eval,不推荐使用</li></ul><h2 id="call-stack（调用堆栈）"><a href="#call-stack（调用堆栈）" class="headerlink" title="call stack（调用堆栈）"></a>call stack（调用堆栈）</h2><p>在当前执行环境中遇到函数时，会将函数压入一个栈（一种数据结构）中并执行函数，若函数中还有函数调用，会继续将遇到的函数压入栈中并执行，函数执行完后会将其弹出栈</p><h2 id="图解三者关系"><a href="#图解三者关系" class="headerlink" title="图解三者关系"></a>图解三者关系</h2><blockquote><p>本文只介绍引擎、执行上下文、调用堆栈之间的关系，关于Event Loop会在后续文章中介绍</p></blockquote><p>如上图所展示一样:<br><img src="http://ww1.sinaimg.cn/large/006NiFm7ly1g2btjlesiuj30nh0budfz.jpg" alt=""></p><ol><li>引擎在加载完代码后，创建全局执行上下文</li><li>解析代码，在代码中找到函数申明和变量定义语句，将变量和函数存储在堆内存中</li><li>执行代码，如果遇到函数将其压入call stack中并执行函数first()</li><li>每当函数执行时，又会创建一个局部执行上下文（局部作用域）</li><li>如果再次遇到函数，重复2-4步骤</li><li>函数执行完后，此函数将被从调用栈中弹出</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">console.log(a)</span><br><span class="line"></span><br><span class="line">function say() &#123;</span><br><span class="line">  console.log(&#39;say&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a &#x3D; &#39;aa&#39;;</span><br><span class="line">var b &#x3D; &#39;bb&#39;;</span><br><span class="line"></span><br><span class="line">say()</span><br></pre></td></tr></table></figure><ul><li>js引擎加载完这段代码，创建一个全局执行上下文</li><li>解析代码，找到定义的变量和申明的函数，将其存入堆内存中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Memory Heap</span><br><span class="line"></span><br><span class="line">a: undefined</span><br><span class="line">b: undefined</span><br><span class="line">say: function() &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行代码，首先将<code>console.log(a)</code>压入栈中并执行，结果为<code>undefined</code>。<br><img src="http://ww1.sinaimg.cn/large/006NiFm7ly1g2btw1wq9gj306q074dfm.jpg" alt=""></p></li><li><p>执行完后将其弹出栈<br><img src="http://ww1.sinaimg.cn/large/006NiFm7ly1g2bu05gy5mj30ai07hdfn.jpg" alt=""></p></li><li><p>函数say引用和变量a,b赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Memory Heap</span><br><span class="line"></span><br><span class="line">a: &#39;aa&#39;</span><br><span class="line">b: &#39;bb&#39;</span><br><span class="line">say: function() &#123;console.log(&#39;say&#39;)&#125;</span><br></pre></td></tr></table></figure></li><li><p>将<code>say()</code>压入call stack中并执行，这个过程中又会创建一个局部作用域<br><img src="http://ww1.sinaimg.cn/large/006NiFm7ly1g2bub8sgc0j30dj06p0sk.jpg" alt=""></p></li><li><p>执行<code>say()</code>中的代码时遇到<code>console.log(&#39;say&#39;)</code>，将其压入call stack中<br><img src="http://ww1.sinaimg.cn/large/006NiFm7ly1g2bue4eaz8j30il07xjr9.jpg" alt=""></p></li><li><p>执行完<code>console.log(&#39;say&#39;)</code>将其弹出栈，继续执行<code>say()</code>中剩余的代码<br><img src="http://ww1.sinaimg.cn/large/006NiFm7ly1g2bug49bhej30mm07t747.jpg" alt=""></p></li><li><p>执行完<code>say()</code>将其弹出栈，继续执行全局执行上下文中剩余的代码，直至执行完</p></li></ul><p><img src="http://ww1.sinaimg.cn/large/006NiFm7ly1g2buka7hz5j30ps08mdfr.jpg" alt=""></p><ul><li>关闭浏览器，销毁全局执行上下文</li></ul><p>本文结束，希望内容对正在浏览的你有所帮助，如有错误，希望指出。</p><p>参考文章：</p><ul><li><a href="https://www.cnblogs.com/jiebba/p/9897287.html" target="_blank" rel="noopener">js的基础(平民理解的执行上下文/调用堆栈/内存栈/值类型/引用类型)</a></li><li><a href="https://www.oschina.net/translate/how-does-javascript-actually-work-part-1" target="_blank" rel="noopener">解读 JavaScript 之引擎、运行时和堆栈调用</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;p&gt;本文旨在记录自己学习V8引擎、执行上下文和调用堆栈是什么，以及他们之间的关系，通过阅读本文，你将会了解JavaScript是如何运行的，在项
      
    
    </summary>
    
      <category term="JavaScript进阶" scheme="https://wstreet.github.io/blog/categories/JavaScript%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="https://wstreet.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript防抖（debounce）</title>
    <link href="https://wstreet.github.io/blog/2019/04/07/JavaScript%E9%98%B2%E6%8A%96%EF%BC%88debounce%EF%BC%89/"/>
    <id>https://wstreet.github.io/blog/2019/04/07/JavaScript防抖（debounce）/</id>
    <published>2019-04-07T12:28:44.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常的开发中，经常会遇到事件频繁触发，比如：</p><ul><li>表单元素的<code>change</code></li><li><code>window</code>的<code>scroll</code>、<code>resize</code></li><li><code>mousemove</code>等</li></ul><p>举例：现在有一个搜索框，但是没有搜索按钮，搜索触发点是在输入关键字的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; React写法</span><br><span class="line">&#x2F;&#x2F; index.jsx</span><br><span class="line"></span><br><span class="line">class Index extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        state &#x3D; &#123;</span><br><span class="line">            value: &#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onChange(e) &#123;</span><br><span class="line">        search(e.target.value) &#x2F;&#x2F; 假设search是有个已经实现的搜索函数</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;form&gt;</span><br><span class="line">                    &lt;input value&#x3D;&#123;this.state.value&#125; onChange&#x3D;&#123;this.onChange.bind(this)&#125; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;form&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子每次输入值都会调用this.onChange函数，我们想要的效果是主动触发搜索，但是没有必要每次输入都去执行，解决这个问题有两种方法：</p><ol><li>防抖</li><li>节流</li></ol><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>你尽管出发触发事件，但是我一定在事件触发n秒后才执行，如果你在一个事件触发的 n 秒内又触发了这个事件，那我就以新的事件的时间为准，n 秒后才执行，总之，就是要等你触发完事件 n 秒内不再触发事件，我才执行，真是任性呐!<br>—– <a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">冴羽</a></p></blockquote><p>所以针对上面的例子，只需要在所有内容输入完后再去执行this.onChange，条件是输入时停顿的时间不能大于设置的wait时间，否则就认为你已经输入完成</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function debounce(func, wait) &#123;</span><br><span class="line">    let timer;</span><br><span class="line">    return function (...args) &#123;</span><br><span class="line">        if (timer) clearTimeout(timer)</span><br><span class="line">        </span><br><span class="line">        timer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            func.apply(this, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onChange&#x3D;&#123;debounce(this.onChange)&#125;</span><br></pre></td></tr></table></figure></p><p>第一版已经实现了防抖功能，但是还存在缺陷，这个防抖只能适用于输入这种后触发，有些事件可能需要立即触发，比如resize、mousemove等，所以我们还需要再加一个immediate选项，表示是否立即调用</p><h4 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function debounce(func, wait, immediate) &#123;</span><br><span class="line"></span><br><span class="line">    let timer;</span><br><span class="line"></span><br><span class="line">    return function (...args) &#123;</span><br><span class="line">        const context &#x3D; this;</span><br><span class="line"></span><br><span class="line">        if (timer) clearTimeout(timer);</span><br><span class="line">        if (immediate) &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果已经执行过，不再执行</span><br><span class="line">            let callNow &#x3D; !timer;</span><br><span class="line">            timer &#x3D; setTimeout(function()&#123;</span><br><span class="line">                timer &#x3D; null;</span><br><span class="line">            &#125;, wait) &#x2F;&#x2F; 触发wait时间后，timer为null，才可以重新触发</span><br><span class="line">            if (callNow) func.apply(context, args)</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            timer &#x3D; setTimeout(function()&#123;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种效果：</p><ul><li>立即执行：immediate为真时，立即执行，停止触发n秒后才能再次执行</li><li>延迟执行：immediate为假时，事件停止触发n秒后执行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在日常的开发中，经常会遇到事件频繁触发，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表单元素的&lt;code&gt;change&lt;/code&gt;&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="JavaScript进阶" scheme="https://wstreet.github.io/blog/categories/JavaScript%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="https://wstreet.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>redux中的applyMiddleware详解</title>
    <link href="https://wstreet.github.io/blog/2019/04/03/redux%E4%B8%AD%E7%9A%84applyMiddleware%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wstreet.github.io/blog/2019/04/03/redux中的applyMiddleware详解/</id>
    <published>2019-04-03T20:21:10.000Z</published>
    <updated>2021-11-27T07:05:05.951Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// applyMiddleware.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class="line">          <span class="string">`Other middleware would not be applied to this dispatch.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    <span class="comment">// fn1 = next =&gt; action =&gt; &#123;&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// fn2 = next =&gt; action =&gt; &#123;&#125;</span></span><br><span class="line">    <span class="comment">// fn3 = next =&gt; action =&gt; &#123;&#125;</span></span><br><span class="line">    <span class="comment">// chain = [fn1, fn2, fn3]</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line">    <span class="comment">// compose(...chain) ========&gt; (...args) =&gt; fn1(fn2(fn3((...args)))</span></span><br><span class="line">    <span class="comment">// dispatch = compose(...chain)(store.dispatch) ========&gt; (...args) =&gt; fn1(fn2(fn3(...args)))(store.dispatch)    =====&gt;   fn1(fn2(fn3(store.dispatch)))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>applyMiddleware</code>返回了一个<code>createStore</code>方法，这个方法和<code>createStore.js</code>中的createStore方法比起来到底强在哪里？</p></blockquote><blockquote><p>答案 ： 增强的dispatch方法！</p></blockquote><p>最终返回的<code>store</code>中的<code>dispatch</code>方法是将原始的裸体<code>store.dispatch</code>经过每一层中间件包裹形成的，就像穿衣服一样，下面将详细介绍</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件的样子就像下面这样，传入store，返回一个dispatch方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const middlewareName &#x3D; store &#x3D;&gt; next &#x3D;&gt; action &#x3D;&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p>核心代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个store</span><br><span class="line">const store &#x3D; createStore(...args)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 构造一个像中间件中传递的store</span><br><span class="line">const middlewareAPI &#x3D; &#123;</span><br><span class="line">    getState: store.getState,</span><br><span class="line">    dispatch: (...args) &#x3D;&gt; dispatch(...args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; const m1 &#x3D; store &#x3D;&gt; next &#x3D;&gt; action &#x3D;&gt; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; const m2 &#x3D; store &#x3D;&gt; next &#x3D;&gt; action &#x3D;&gt; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; const m3 &#x3D; store &#x3D;&gt; next &#x3D;&gt; action &#x3D;&gt; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; const middlewares &#x3D; [m1, m2, m3]</span><br><span class="line">const chain &#x3D; middlewares.map(middleware &#x3D;&gt; middleware(middlewareAPI))</span><br><span class="line">&#x2F;&#x2F; 返回一个列表， 内容如下</span><br><span class="line">&#x2F;&#x2F; 假设:</span><br><span class="line">&#x2F;&#x2F; dis1 &#x3D; next &#x3D;&gt; action &#x3D;&gt; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; dis2 &#x3D; next &#x3D;&gt; action &#x3D;&gt; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; dis3 &#x3D; next &#x3D;&gt; action &#x3D;&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; chain &#x3D; [dis1, dis2, dis3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关于compose可在另一篇文章中查看</span><br><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;wstreet.github.io&#x2F;blog&#x2F;2019&#x2F;04&#x2F;02&#x2F;redux%E4%B8%ADcompose%E8%AF%A6%E8%A7%A3&#x2F;</span><br><span class="line">dispatch &#x3D; compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;            compose(...chain)                 &#x3D;&#x3D;&#x3D;&gt; (...args) &#x3D;&gt; dis1(dis2(dis3(...args)))</span><br><span class="line">&#x2F;&#x2F; dispatch &#x3D; compose(...chain)(store.dispatch) &#x3D;&#x3D;&#x3D;&gt; (...args) &#x3D;&gt; dis1(dis2(dis3(...args)))(store.dispatch) &#x3D;&#x3D;&#x3D;&gt; dis1(dis2(dis3(store.dispatch)))</span><br></pre></td></tr></table></figure><br>代码分析到这里一目了然，最后的dispatch是执行中间件列表生成的复杂dispatch</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="React" scheme="https://wstreet.github.io/blog/categories/React/"/>
    
    
      <category term="React" scheme="https://wstreet.github.io/blog/tags/React/"/>
    
      <category term="Redux" scheme="https://wstreet.github.io/blog/tags/Redux/"/>
    
  </entry>
  
</feed>
